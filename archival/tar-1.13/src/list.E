# 1 "list.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "list.c"
# 22 "list.c"
# 1 "system.h" 1
# 20 "system.h"
# 1 "../config.h" 1
# 21 "system.h" 2
# 41 "system.h"
# 1 "h:/mingw/include/sys/types.h" 1 3
# 32 "h:/mingw/include/sys/types.h" 3
# 1 "h:/mingw/include/_mingw.h" 1 3
# 33 "h:/mingw/include/sys/types.h" 2 3





# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 153 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 3
typedef int ptrdiff_t;
# 215 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 3
typedef unsigned int size_t;
# 327 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 3
typedef short unsigned int wchar_t;
# 7 "h:/mingw/include/stddef.h" 2 3

# 1 "h:/mingw/mingw32/include/winx/stddefx.h" 1 3
# 9 "h:/mingw/include/stddef.h" 2 3
# 39 "h:/mingw/include/sys/types.h" 2 3





typedef long time_t;
# 53 "h:/mingw/include/sys/types.h" 3
typedef long _off_t;


typedef _off_t off_t;







typedef unsigned int _dev_t;





typedef _dev_t dev_t;






typedef short _ino_t;


typedef _ino_t ino_t;






typedef int _pid_t;


typedef _pid_t pid_t;






typedef unsigned short _mode_t;


typedef _mode_t mode_t;






typedef int _sigset_t;


typedef _sigset_t sigset_t;
# 119 "h:/mingw/include/sys/types.h" 3
# 1 "h:/mingw/mingw32/include/winx/sys/typesx.h" 1 3



# 1 "h:/mingw/mingw32/include/features.h" 1 3
# 291 "h:/mingw/mingw32/include/features.h" 3
# 1 "h:/mingw/mingw32/include/sys/cdefs.h" 1 3
# 292 "h:/mingw/mingw32/include/features.h" 2 3
# 314 "h:/mingw/mingw32/include/features.h" 3
# 1 "h:/mingw/mingw32/include/gnu/stubs.h" 1 3
# 315 "h:/mingw/mingw32/include/features.h" 2 3
# 5 "h:/mingw/mingw32/include/winx/sys/typesx.h" 2 3


typedef unsigned long vm_offset_t;
typedef unsigned long vm_size_t;
typedef long ssize_t;






# 1 "h:/mingw/mingw32/include/bits/types.h" 1 3
# 28 "h:/mingw/mingw32/include/bits/types.h" 3
# 1 "h:/mingw/mingw32/include/bits/wordsize.h" 1 3
# 29 "h:/mingw/mingw32/include/bits/types.h" 2 3


# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 32 "h:/mingw/mingw32/include/bits/types.h" 2 3


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;





__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 128 "h:/mingw/mingw32/include/bits/types.h" 3
# 1 "h:/mingw/mingw32/include/bits/typesizes.h" 1 3
# 129 "h:/mingw/mingw32/include/bits/types.h" 2 3


typedef unsigned long long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef long long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef int __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long long int __fsfilcnt64_t;




typedef int __ssize_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef int __intptr_t;


typedef unsigned int __socklen_t;
# 17 "h:/mingw/mingw32/include/winx/sys/typesx.h" 2 3

typedef __int8_t int8_t;
typedef __uint8_t u_int8_t;
typedef __int16_t int16_t;
typedef __uint16_t u_int16_t;

typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef __int32_t int32_t;
typedef __uint32_t u_int32_t;
typedef __uint32_t uint32_t;
typedef __int32_t __register_t;
typedef int32_t register_t;
typedef __int64_t int64_t;
typedef __uint64_t u_int64_t;







typedef int caddr_t;
typedef long daddr_t;
typedef long key_t;
typedef char * addr_t;

typedef unsigned int useconds_t;




typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef u_long ulong;
# 99 "h:/mingw/mingw32/include/winx/sys/typesx.h" 3
typedef __gid_t gid_t;
# 118 "h:/mingw/mingw32/include/winx/sys/typesx.h" 3
typedef __nlink_t nlink_t;
# 132 "h:/mingw/mingw32/include/winx/sys/typesx.h" 3
typedef __uid_t uid_t;





typedef __blkcnt_t blkcnt_t;







typedef __blksize_t blksize_t;
# 120 "h:/mingw/include/sys/types.h" 2 3
# 42 "system.h" 2
# 50 "system.h"
# 1 "h:/mingw/include/ctype.h" 1 3
# 36 "h:/mingw/include/ctype.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 356 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 3
typedef short unsigned int wint_t;
# 7 "h:/mingw/include/stddef.h" 2 3
# 37 "h:/mingw/include/ctype.h" 2 3
# 62 "h:/mingw/include/ctype.h" 3
 int __attribute__((__cdecl__)) isalnum(int);
 int __attribute__((__cdecl__)) isalpha(int);
 int __attribute__((__cdecl__)) iscntrl(int);
 int __attribute__((__cdecl__)) isdigit(int);
 int __attribute__((__cdecl__)) isgraph(int);
 int __attribute__((__cdecl__)) islower(int);
 int __attribute__((__cdecl__)) isprint(int);
 int __attribute__((__cdecl__)) ispunct(int);
 int __attribute__((__cdecl__)) isspace(int);
 int __attribute__((__cdecl__)) isupper(int);
 int __attribute__((__cdecl__)) isxdigit(int);


 int __attribute__((__cdecl__)) _isctype (int, int);



 int __attribute__((__cdecl__)) tolower(int);
 int __attribute__((__cdecl__)) toupper(int);
# 92 "h:/mingw/include/ctype.h" 3
 int __attribute__((__cdecl__)) _tolower(int);
 int __attribute__((__cdecl__)) _toupper(int);







   extern __attribute__((dllimport)) int __mb_cur_max;
# 120 "h:/mingw/include/ctype.h" 3
extern __attribute__((dllimport)) unsigned short _ctype[];

  extern __attribute__((dllimport)) unsigned short* _pctype;
# 187 "h:/mingw/include/ctype.h" 3
typedef wchar_t wctype_t;



 int __attribute__((__cdecl__)) iswalnum(wint_t);
 int __attribute__((__cdecl__)) iswalpha(wint_t);
 int __attribute__((__cdecl__)) iswascii(wint_t);
 int __attribute__((__cdecl__)) iswcntrl(wint_t);
 int __attribute__((__cdecl__)) iswctype(wint_t, wctype_t);
 int __attribute__((__cdecl__)) is_wctype(wint_t, wctype_t);
 int __attribute__((__cdecl__)) iswdigit(wint_t);
 int __attribute__((__cdecl__)) iswgraph(wint_t);
 int __attribute__((__cdecl__)) iswlower(wint_t);
 int __attribute__((__cdecl__)) iswprint(wint_t);
 int __attribute__((__cdecl__)) iswpunct(wint_t);
 int __attribute__((__cdecl__)) iswspace(wint_t);
 int __attribute__((__cdecl__)) iswupper(wint_t);
 int __attribute__((__cdecl__)) iswxdigit(wint_t);

 wchar_t __attribute__((__cdecl__)) towlower(wchar_t);
 wchar_t __attribute__((__cdecl__)) towupper(wchar_t);

 int __attribute__((__cdecl__)) isleadbyte (int);
# 231 "h:/mingw/include/ctype.h" 3
int __attribute__((__cdecl__)) __isascii (int);
int __attribute__((__cdecl__)) __toascii (int);
int __attribute__((__cdecl__)) __iscsymf (int);
int __attribute__((__cdecl__)) __iscsym (int);
# 245 "h:/mingw/include/ctype.h" 3
int __attribute__((__cdecl__)) isascii (int);
int __attribute__((__cdecl__)) toascii (int);
int __attribute__((__cdecl__)) iscsymf (int);
int __attribute__((__cdecl__)) iscsym (int);
# 261 "h:/mingw/include/ctype.h" 3
# 1 "h:/mingw/mingw32/include/winx/ctypex.h" 1 3
# 13 "h:/mingw/mingw32/include/winx/ctypex.h" 3
# 1 "h:/mingw/mingw32/include/endian.h" 1 3
# 37 "h:/mingw/mingw32/include/endian.h" 3
# 1 "h:/mingw/mingw32/include/bits/endian.h" 1 3
# 38 "h:/mingw/mingw32/include/endian.h" 2 3
# 14 "h:/mingw/mingw32/include/winx/ctypex.h" 2 3






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 262 "h:/mingw/include/ctype.h" 2 3
# 51 "system.h" 2
# 70 "system.h"
# 1 "h:/mingw/include/string.h" 1 3
# 40 "h:/mingw/include/string.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 41 "h:/mingw/include/string.h" 2 3
# 52 "h:/mingw/include/string.h" 3
 void* __attribute__((__cdecl__)) memchr (const void*, int, size_t);
 int __attribute__((__cdecl__)) memcmp (const void*, const void*, size_t);
 void* __attribute__((__cdecl__)) memcpy (void*, const void*, size_t);
 void* __attribute__((__cdecl__)) memmove (void*, const void*, size_t);
 void* __attribute__((__cdecl__)) memset (void*, int, size_t);
 char* __attribute__((__cdecl__)) strcat (char*, const char*);
 char* __attribute__((__cdecl__)) strchr (const char*, int);
 int __attribute__((__cdecl__)) strcmp (const char*, const char*);
 int __attribute__((__cdecl__)) strcoll (const char*, const char*);
 char* __attribute__((__cdecl__)) strcpy (char*, const char*);
 size_t __attribute__((__cdecl__)) strcspn (const char*, const char*);
 char* __attribute__((__cdecl__)) strerror (int);

 size_t __attribute__((__cdecl__)) strlen (const char*);
 char* __attribute__((__cdecl__)) strncat (char*, const char*, size_t);
 int __attribute__((__cdecl__)) strncmp (const char*, const char*, size_t);
 char* __attribute__((__cdecl__)) strncpy (char*, const char*, size_t);
 char* __attribute__((__cdecl__)) strpbrk (const char*, const char*);
 char* __attribute__((__cdecl__)) strrchr (const char*, int);
 size_t __attribute__((__cdecl__)) strspn (const char*, const char*);
 char* __attribute__((__cdecl__)) strstr (const char*, const char*);
 char* __attribute__((__cdecl__)) strtok (char*, const char*);
 size_t __attribute__((__cdecl__)) strxfrm (char*, const char*, size_t);





 char* __attribute__((__cdecl__)) _strerror (const char *);
 void* __attribute__((__cdecl__)) _memccpy (void*, const void*, int, size_t);
 int __attribute__((__cdecl__)) _memicmp (const void*, const void*, size_t);
 char* __attribute__((__cdecl__)) _strdup (const char*);
 int __attribute__((__cdecl__)) _strcmpi (const char*, const char*);
 int __attribute__((__cdecl__)) _stricmp (const char*, const char*);
 int __attribute__((__cdecl__)) _stricoll (const char*, const char*);
 char* __attribute__((__cdecl__)) _strlwr (char*);
 int __attribute__((__cdecl__)) _strnicmp (const char*, const char*, size_t);
 char* __attribute__((__cdecl__)) _strnset (char*, int, size_t);
 char* __attribute__((__cdecl__)) _strrev (char*);
 char* __attribute__((__cdecl__)) _strset (char*, int);
 char* __attribute__((__cdecl__)) _strupr (char*);
 void __attribute__((__cdecl__)) _swab (const char*, char*, size_t);


 int __attribute__((__cdecl__)) _strncoll(const char*, const char*, size_t);
 int __attribute__((__cdecl__)) _strnicoll(const char*, const char*, size_t);







 wchar_t* __attribute__((__cdecl__)) wcscat (wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcschr (const wchar_t*, wchar_t);
 int __attribute__((__cdecl__)) wcscmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) wcscoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcscpy (wchar_t*, const wchar_t*);
 size_t __attribute__((__cdecl__)) wcscspn (const wchar_t*, const wchar_t*);

 size_t __attribute__((__cdecl__)) wcslen (const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsncat (wchar_t*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) wcsncmp(const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) wcsncpy(wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) wcspbrk(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsrchr(const wchar_t*, wchar_t);
 size_t __attribute__((__cdecl__)) wcsspn(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsstr(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcstok(wchar_t*, const wchar_t*);
 size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t*, const wchar_t*, size_t);
# 131 "h:/mingw/include/string.h" 3
 wchar_t* __attribute__((__cdecl__)) _wcsdup (const wchar_t*);
 int __attribute__((__cdecl__)) _wcsicmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) _wcsicoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wcslwr (wchar_t*);
 int __attribute__((__cdecl__)) _wcsnicmp (const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) _wcsnset (wchar_t*, wchar_t, size_t);
 wchar_t* __attribute__((__cdecl__)) _wcsrev (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wcsset (wchar_t*, wchar_t);
 wchar_t* __attribute__((__cdecl__)) _wcsupr (wchar_t*);


 int __attribute__((__cdecl__)) _wcsncoll(const wchar_t*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
# 159 "h:/mingw/include/string.h" 3
 void* __attribute__((__cdecl__)) memccpy (void*, const void*, int, size_t);
 int __attribute__((__cdecl__)) memicmp (const void*, const void*, size_t);
 char* __attribute__((__cdecl__)) strdup (const char*);
 int __attribute__((__cdecl__)) strcmpi (const char*, const char*);
 int __attribute__((__cdecl__)) stricmp (const char*, const char*);
extern __inline__ int __attribute__((__cdecl__))
strcasecmp (const char * __sz1, const char * __sz2)
  {return _stricmp (__sz1, __sz2);}
 int __attribute__((__cdecl__)) stricoll (const char*, const char*);
 char* __attribute__((__cdecl__)) strlwr (char*);
 int __attribute__((__cdecl__)) strnicmp (const char*, const char*, size_t);
extern __inline__ int __attribute__((__cdecl__))
strncasecmp (const char * __sz1, const char * __sz2, size_t __sizeMaxCompare)
  {return _strnicmp (__sz1, __sz2, __sizeMaxCompare);}
 char* __attribute__((__cdecl__)) strnset (char*, int, size_t);
 char* __attribute__((__cdecl__)) strrev (char*);
 char* __attribute__((__cdecl__)) strset (char*, int);
 char* __attribute__((__cdecl__)) strupr (char*);

 void __attribute__((__cdecl__)) swab (const char*, char*, size_t);



extern __inline__ int __attribute__((__cdecl__))
wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2)
  {return _wcsicmp (__ws1, __ws2);}
 wchar_t* __attribute__((__cdecl__)) wcsdup (wchar_t*);
 int __attribute__((__cdecl__)) wcsicmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) wcsicoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcslwr (wchar_t*);
 int __attribute__((__cdecl__)) wcsnicmp (const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) wcsnset (wchar_t*, wchar_t, size_t);
 wchar_t* __attribute__((__cdecl__)) wcsrev (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsset (wchar_t*, wchar_t);
 wchar_t* __attribute__((__cdecl__)) wcsupr (wchar_t*);
# 207 "h:/mingw/include/string.h" 3
# 1 "h:/mingw/mingw32/include/winx/stringx.h" 1 3
# 36 "h:/mingw/mingw32/include/winx/stringx.h" 3
extern void *__mempcpy (void *dstpp, const void *srcpp, size_t len);
extern void *mempcpy (void *dstpp, const void *srcpp, size_t len);
extern char * strtok_r (register char *s, register const char *delim, char **lasts);


int _strncoll(const char*, const char*, size_t);
int _strnicoll(const char*, const char*, size_t);



int _wcsncoll(const wchar_t*, const wchar_t*, size_t);
int _wcsnicoll(const wchar_t*, const wchar_t*, size_t);


extern char * __strsep (char ** , const char * );
# 76 "h:/mingw/mingw32/include/winx/stringx.h" 3
extern void *rawmemchr (__const void *__s, int __c) __attribute__ ((__pure__));


extern int strverscmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__pure__));




extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__malloc__));



extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__pure__));
# 208 "h:/mingw/include/string.h" 2 3
# 71 "system.h" 2
# 92 "system.h"
# 1 "h:/mingw/include/errno.h" 1 3
# 107 "h:/mingw/include/errno.h" 3
 int* __attribute__((__cdecl__)) _errno(void);
# 118 "h:/mingw/include/errno.h" 3
# 1 "h:/mingw/mingw32/include/winx/errnox.h" 1 3



# 1 "h:/mingw/include/sys/types.h" 1 3
# 5 "h:/mingw/mingw32/include/winx/errnox.h" 2 3
# 88 "h:/mingw/mingw32/include/winx/errnox.h" 3
extern char *__strerror_r (int errnum, char *buf, size_t buflen);
extern int werrno (void);
extern int __get_errno(int oserr);
# 119 "h:/mingw/include/errno.h" 2 3
# 93 "system.h" 2







# 1 "h:/mingw/include/fcntl.h" 1 3
# 39 "h:/mingw/include/fcntl.h" 3
# 1 "h:/mingw/include/io.h" 1 3
# 36 "h:/mingw/include/io.h" 3
# 1 "h:/mingw/include/stdio.h" 1 3
# 42 "h:/mingw/include/stdio.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 43 "h:/mingw/include/stdio.h" 2 3

# 1 "h:/mingw/include/stdarg.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stdarg.h" 1 3
# 44 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 7 "h:/mingw/include/stdarg.h" 2 3

# 1 "h:/mingw/mingw32/include/winx/stdargx.h" 1 3
# 9 "h:/mingw/include/stdarg.h" 2 3
# 45 "h:/mingw/include/stdio.h" 2 3
# 151 "h:/mingw/include/stdio.h" 3
typedef struct _iobuf
{
        char* _ptr;
        int _cnt;
        char* _base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char* _tmpfname;
} FILE;
# 176 "h:/mingw/include/stdio.h" 3
extern __attribute__((dllimport)) FILE _iob[];
# 191 "h:/mingw/include/stdio.h" 3
 FILE* __attribute__((__cdecl__)) fopen (const char*, const char*);
 FILE* __attribute__((__cdecl__)) freopen (const char*, const char*, FILE*);
 int __attribute__((__cdecl__)) fflush (FILE*);
 int __attribute__((__cdecl__)) fclose (FILE*);

 int __attribute__((__cdecl__)) remove (const char*);
 int __attribute__((__cdecl__)) rename (const char*, const char*);
 FILE* __attribute__((__cdecl__)) tmpfile (void);
 char* __attribute__((__cdecl__)) tmpnam (char*);
 char* __attribute__((__cdecl__)) _tempnam (const char*, const char*);


 char* __attribute__((__cdecl__)) tempnam (const char*, const char*);


 int __attribute__((__cdecl__)) setvbuf (FILE*, char*, int, size_t);

 void __attribute__((__cdecl__)) setbuf (FILE*, char*);





 int __attribute__((__cdecl__)) fprintf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) printf (const char*, ...);
 int __attribute__((__cdecl__)) sprintf (char*, const char*, ...);
 int __attribute__((__cdecl__)) _snprintf (char*, size_t, const char*, ...);
 int __attribute__((__cdecl__)) vfprintf (FILE*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vprintf (const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vsprintf (char*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) _vsnprintf (char*, size_t, const char*, __gnuc_va_list);


int __attribute__((__cdecl__)) snprintf(char* s, size_t n, const char* format, ...);
extern __inline__ int __attribute__((__cdecl__))
vsnprintf (char* s, size_t n, const char* format, __gnuc_va_list arg)
  { return _vsnprintf ( s, n, format, arg); }
int __attribute__((__cdecl__)) vscanf (const char * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) vfscanf (FILE * __restrict__, const char * __restrict__,
                     __gnuc_va_list);
int __attribute__((__cdecl__)) vsscanf (const char * __restrict__,
                     const char * __restrict__, __gnuc_va_list);






 int __attribute__((__cdecl__)) fscanf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) scanf (const char*, ...);
 int __attribute__((__cdecl__)) sscanf (const char*, const char*, ...);




 int __attribute__((__cdecl__)) fgetc (FILE*);
 char* __attribute__((__cdecl__)) fgets (char*, int, FILE*);
 int __attribute__((__cdecl__)) fputc (int, FILE*);
 int __attribute__((__cdecl__)) fputs (const char*, FILE*);
 int __attribute__((__cdecl__)) getc (FILE*);
 int __attribute__((__cdecl__)) getchar (void);
 char* __attribute__((__cdecl__)) gets (char*);
 int __attribute__((__cdecl__)) putc (int, FILE*);
 int __attribute__((__cdecl__)) putchar (int);
 int __attribute__((__cdecl__)) puts (const char*);
 int __attribute__((__cdecl__)) ungetc (int, FILE*);





 size_t __attribute__((__cdecl__)) fread (void*, size_t, size_t, FILE*);
 size_t __attribute__((__cdecl__)) fwrite (const void*, size_t, size_t, FILE*);





 int __attribute__((__cdecl__)) fseek (FILE*, long, int);
 long __attribute__((__cdecl__)) ftell (FILE*);
 void __attribute__((__cdecl__)) rewind (FILE*);
# 295 "h:/mingw/include/stdio.h" 3
typedef long long fpos_t;




 int __attribute__((__cdecl__)) fgetpos (FILE*, fpos_t*);
 int __attribute__((__cdecl__)) fsetpos (FILE*, const fpos_t*);





 void __attribute__((__cdecl__)) clearerr (FILE*);
 int __attribute__((__cdecl__)) feof (FILE*);
 int __attribute__((__cdecl__)) ferror (FILE*);
 void __attribute__((__cdecl__)) perror (const char*);






 FILE* __attribute__((__cdecl__)) _popen (const char*, const char*);
 int __attribute__((__cdecl__)) _pclose (FILE*);


 FILE* __attribute__((__cdecl__)) popen (const char*, const char*);
 int __attribute__((__cdecl__)) pclose (FILE*);





 int __attribute__((__cdecl__)) _flushall (void);
 int __attribute__((__cdecl__)) _fgetchar (void);
 int __attribute__((__cdecl__)) _fputchar (int);
 FILE* __attribute__((__cdecl__)) _fdopen (int, const char*);
 int __attribute__((__cdecl__)) _fileno (FILE*);
 int __attribute__((__cdecl__)) _fcloseall(void);

 int __attribute__((__cdecl__)) _getmaxstdio(void);
 int __attribute__((__cdecl__)) _setmaxstdio(int);



 int __attribute__((__cdecl__)) fgetchar (void);
 int __attribute__((__cdecl__)) fputchar (int);
 FILE* __attribute__((__cdecl__)) fdopen (int, const char*);
 int __attribute__((__cdecl__)) fileno (FILE*);
# 352 "h:/mingw/include/stdio.h" 3
 int __attribute__((__cdecl__)) fwprintf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) wprintf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) swprintf (wchar_t*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) _snwprintf (wchar_t*, size_t, const wchar_t*, ...);
 int __attribute__((__cdecl__)) vfwprintf (FILE*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vswprintf (wchar_t*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) _vsnwprintf (wchar_t*, size_t, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) fwscanf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) wscanf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) swscanf (const wchar_t*, const wchar_t*, ...);
 wint_t __attribute__((__cdecl__)) fgetwc (FILE*);
 wint_t __attribute__((__cdecl__)) fputwc (wchar_t, FILE*);
 wint_t __attribute__((__cdecl__)) ungetwc (wchar_t, FILE*);


 wchar_t* __attribute__((__cdecl__)) fgetws (wchar_t*, int, FILE*);
 int __attribute__((__cdecl__)) fputws (const wchar_t*, FILE*);
 wint_t __attribute__((__cdecl__)) getwc (FILE*);
 wint_t __attribute__((__cdecl__)) getwchar (void);
 wchar_t* __attribute__((__cdecl__)) _getws (wchar_t*);
 wint_t __attribute__((__cdecl__)) putwc (wint_t, FILE*);
 int __attribute__((__cdecl__)) _putws (const wchar_t*);
 wint_t __attribute__((__cdecl__)) putwchar (wint_t);
 FILE* __attribute__((__cdecl__)) _wfdopen(int, wchar_t *);
 FILE* __attribute__((__cdecl__)) _wfopen (const wchar_t*, const wchar_t*);
 FILE* __attribute__((__cdecl__)) _wfreopen (const wchar_t*, const wchar_t*, FILE*);
 FILE* __attribute__((__cdecl__)) _wfsopen (const wchar_t*, const wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _wtmpnam (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wtempnam (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) _wrename (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) _wremove (const wchar_t*);
 void __attribute__((__cdecl__)) _wperror (const wchar_t*);
 FILE* __attribute__((__cdecl__)) _wpopen (const wchar_t*, const wchar_t*);



int __attribute__((__cdecl__)) snwprintf (wchar_t* s, size_t n, const wchar_t* format, ...);
extern __inline__ int __attribute__((__cdecl__))
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __gnuc_va_list arg)
  { return _vsnwprintf ( s, n, format, arg);}
int __attribute__((__cdecl__)) vwscanf (const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) vfwscanf (FILE * __restrict__,
                       const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) vswscanf (const wchar_t * __restrict__,
                       const wchar_t * __restrict__, __gnuc_va_list);
# 406 "h:/mingw/include/stdio.h" 3
 FILE* __attribute__((__cdecl__)) wpopen (const wchar_t*, const wchar_t*);






 wint_t __attribute__((__cdecl__)) _fgetwchar (void);
 wint_t __attribute__((__cdecl__)) _fputwchar (wint_t);
 int __attribute__((__cdecl__)) _getw (FILE*);
 int __attribute__((__cdecl__)) _putw (int, FILE*);


 wint_t __attribute__((__cdecl__)) fgetwchar (void);
 wint_t __attribute__((__cdecl__)) fputwchar (wint_t);
 int __attribute__((__cdecl__)) getw (FILE*);
 int __attribute__((__cdecl__)) putw (int, FILE*);
# 434 "h:/mingw/include/stdio.h" 3
# 1 "h:/mingw/mingw32/include/winx/stdiox.h" 1 3





# 1 "h:/mingw/include/sys/types.h" 1 3
# 7 "h:/mingw/mingw32/include/winx/stdiox.h" 2 3
# 1 "h:/mingw/mingw32/include/stdio_ext.h" 1 3
# 26 "h:/mingw/mingw32/include/stdio_ext.h" 3
# 1 "h:/mingw/include/stdio.h" 1 3
# 434 "h:/mingw/include/stdio.h" 3
# 1 "h:/mingw/mingw32/include/winx/stdiox.h" 1 3
# 435 "h:/mingw/include/stdio.h" 2 3
# 27 "h:/mingw/mingw32/include/stdio_ext.h" 2 3

enum
{

  FSETLOCKING_QUERY = 0,



  FSETLOCKING_INTERNAL,


  FSETLOCKING_BYCALLER

};






extern size_t __fbufsize (FILE *__fp);




extern int __freading (FILE *__fp);




extern int __fwriting (FILE *__fp);




extern int __freadable (FILE *__fp);


extern int __fwritable (FILE *__fp);



extern int __flbf (FILE *__fp);



extern void __fpurge (FILE *__fp);


extern size_t __fpending (FILE *__fp);


extern void _flushlbf (void);



extern int __fsetlocking (FILE *__fp, int __type);


# 8 "h:/mingw/mingw32/include/winx/stdiox.h" 2 3
# 45 "h:/mingw/mingw32/include/winx/stdiox.h" 3
extern FILE * __fdopen (int __fd, __const char *__modes) __asm__ ("_" "_fdopen");






extern void _flushlbf (void) __asm__ ("_" "_flushall");

extern void flushall (void) __asm__ ("_" "_flushall");


extern __inline__ int __flbf (FILE *__fp)
{
        return (int) (__fp->_flag & 0x0040);
}

extern __inline__ size_t __fpending (FILE *__fp)
{
        return (size_t) (__fp->_ptr - __fp->_base);
}


extern __inline__ size_t __fbufsize (FILE *__fp)
{
        return (size_t) (__fp->_bufsiz);
}




extern __inline__ void setbuf (FILE *__restrict __stream, char *__restrict __buf)
{
        (__buf == ((void *)0) ? setvbuf(__stream, __buf, 0x0004, 512) : setvbuf(__stream, __buf, 0x0000, 512));

}





extern __inline__ void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
                 size_t __size)
{
        (__buf == ((void *)0) ? setvbuf(__stream, __buf, 0x0004, __size) : setvbuf(__stream, __buf, 0x0000, __size));

}

extern __inline__ void setlinebuf (FILE *__stream)
{
        setvbuf(__stream, ((void *)0), 0x0040, 512);
}

extern __inline__ int __validfp (FILE *__stream)
{
        return __stream != ((void *)0);
}
# 116 "h:/mingw/mingw32/include/winx/stdiox.h" 3
extern int fseeko (FILE *__stream, __off_t __off, int __whence) ;

extern __off_t ftello (FILE *__stream) ;
# 135 "h:/mingw/mingw32/include/winx/stdiox.h" 3
typedef fpos_t fpos64_t;
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence) ;
extern __off64_t ftello64 (FILE *__stream) ;

extern __inline__ int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos) __asm__ ("_" "fgetpos");


extern __inline__ int fsetpos64 (FILE *__stream, __const fpos64_t *__pos) __asm__ ("_" "fsetpos");
# 151 "h:/mingw/mingw32/include/winx/stdiox.h" 3
extern __const char *__const _sys_errlist_internal[];
extern int _sys_nerr_internal ;


extern FILE *tmpfile64 (void) ;





extern char *tmpnam_r (char *__s) ;



# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 166 "h:/mingw/mingw32/include/winx/stdiox.h" 2 3

extern int __path_search (char *__tmpl, size_t __tmpl_len,
                 __const char *__dir, __const char *__pfx,
                 int __try_tempdir);

extern int __gen_tempname (char *__tmpl, int __kind);
# 435 "h:/mingw/include/stdio.h" 2 3
# 37 "h:/mingw/include/io.h" 2 3






# 1 "h:/mingw/include/sys/types.h" 1 3
# 44 "h:/mingw/include/io.h" 2 3
# 60 "h:/mingw/include/io.h" 3
typedef unsigned long _fsize_t;







struct _finddata_t
{
        unsigned attrib;
        time_t time_create;
        time_t time_access;
        time_t time_write;
        _fsize_t size;
        char name[(260)];
};

struct _finddatai64_t {
    unsigned attrib;
    time_t time_create;
    time_t time_access;
    time_t time_write;
    long long size;
    char name[(260)];
};



struct _wfinddata_t {
        unsigned attrib;
        time_t time_create;
        time_t time_access;
        time_t time_write;
        _fsize_t size;
        wchar_t name[(260)];
};
struct _wfinddatai64_t {
    unsigned attrib;
    time_t time_create;
    time_t time_access;
    time_t time_write;
    long long size;
    wchar_t name[(260)];
};
# 119 "h:/mingw/include/io.h" 3
 int __attribute__((__cdecl__)) _findfirst (const char*, struct _finddata_t*);
 int __attribute__((__cdecl__)) _findnext (int, struct _finddata_t*);
 int __attribute__((__cdecl__)) _findclose (int);

 int __attribute__((__cdecl__)) _chdir (const char*);
 char* __attribute__((__cdecl__)) _getcwd (char*, int);
 int __attribute__((__cdecl__)) _mkdir (const char*);
 char* __attribute__((__cdecl__)) _mktemp (char*);
 int __attribute__((__cdecl__)) _rmdir (const char*);
 int __attribute__((__cdecl__)) _chmod (const char*, int);



 long long __attribute__((__cdecl__)) _filelengthi64(int);
 long __attribute__((__cdecl__)) _findfirsti64(const char*, struct _finddatai64_t*);
 int __attribute__((__cdecl__)) _findnexti64(long, struct _finddatai64_t*);
 long long __attribute__((__cdecl__)) _lseeki64(int, long long, int);
 long long __attribute__((__cdecl__)) _telli64(int);






 int __attribute__((__cdecl__)) chdir (const char*);
 char* __attribute__((__cdecl__)) getcwd (char*, int);

 char* __attribute__((__cdecl__)) mktemp (char*);
 int __attribute__((__cdecl__)) rmdir (const char*);
 int __attribute__((__cdecl__)) chmod (const char*, int);
# 179 "h:/mingw/include/io.h" 3
 int __attribute__((__cdecl__)) _access (const char*, int);
 int __attribute__((__cdecl__)) _chsize (int, long);
 int __attribute__((__cdecl__)) _close (int);
 int __attribute__((__cdecl__)) _commit(int);



 int __attribute__((__cdecl__)) _creat (const char*, int);

 int __attribute__((__cdecl__)) _dup (int);
 int __attribute__((__cdecl__)) _dup2 (int, int);
 long __attribute__((__cdecl__)) _filelength (int);
 int __attribute__((__cdecl__)) _fileno (FILE*);
 long __attribute__((__cdecl__)) _get_osfhandle (int);
 int __attribute__((__cdecl__)) _isatty (int);







 int __attribute__((__cdecl__)) _eof (int);



 int __attribute__((__cdecl__)) _locking (int, int, long);

 long __attribute__((__cdecl__)) _lseek (int, long, int);


 int __attribute__((__cdecl__)) _open (const char*, int, ...);

 int __attribute__((__cdecl__)) _open_osfhandle (long, int);
 int __attribute__((__cdecl__)) _pipe (int *, unsigned int, int);
 int __attribute__((__cdecl__)) _read (int, void*, unsigned int);
 int __attribute__((__cdecl__)) _setmode (int, int);



 int __attribute__((__cdecl__)) _sopen (const char*, int, int, ...);

 long __attribute__((__cdecl__)) _tell (int);

 int __attribute__((__cdecl__)) _umask (int);
 int __attribute__((__cdecl__)) _unlink (const char*);
 int __attribute__((__cdecl__)) _write (int, const void*, unsigned int);





 int __attribute__((__cdecl__)) _waccess(const wchar_t*, int);
 int __attribute__((__cdecl__)) _wchmod(const wchar_t*, int);
 int __attribute__((__cdecl__)) _wcreat(const wchar_t*, int);
 long __attribute__((__cdecl__)) _wfindfirst(const wchar_t*, struct _wfinddata_t*);
 int __attribute__((__cdecl__)) _wfindnext(long, struct _wfinddata_t *);
 int __attribute__((__cdecl__)) _wunlink(const wchar_t*);
 int __attribute__((__cdecl__)) _wopen(const wchar_t*, int, ...);
 int __attribute__((__cdecl__)) _wsopen(const wchar_t*, int, int, ...);
 wchar_t * __attribute__((__cdecl__)) _wmktemp(wchar_t*);
 long __attribute__((__cdecl__)) _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
 int __attribute__((__cdecl__)) _wfindnexti64(long, struct _wfinddatai64_t*);
# 253 "h:/mingw/include/io.h" 3
 int __attribute__((__cdecl__)) access (const char*, int);
 int __attribute__((__cdecl__)) chsize (int, long );
 int __attribute__((__cdecl__)) close (int);
 int __attribute__((__cdecl__)) creat (const char*, int);
 int __attribute__((__cdecl__)) dup (int);
 int __attribute__((__cdecl__)) dup2 (int, int);
 int __attribute__((__cdecl__)) eof (int);
 long __attribute__((__cdecl__)) filelength (int);
 int __attribute__((__cdecl__)) fileno (FILE*);
 int __attribute__((__cdecl__)) isatty (int);
 long __attribute__((__cdecl__)) lseek (int, long, int);
 int __attribute__((__cdecl__)) open (const char*, int, ...);
 int __attribute__((__cdecl__)) read (int, void*, unsigned int);
 int __attribute__((__cdecl__)) setmode (int, int);
 int __attribute__((__cdecl__)) sopen (const char*, int, int, ...);
 long __attribute__((__cdecl__)) tell (int);
 int __attribute__((__cdecl__)) umask (int);
 int __attribute__((__cdecl__)) unlink (const char*);
 int __attribute__((__cdecl__)) write (int, const void*, unsigned int);
# 301 "h:/mingw/include/io.h" 3
# 1 "h:/mingw/mingw32/include/winx/iox.h" 1 3







# 1 "h:/mingw/include/stdlib.h" 1 3
# 38 "h:/mingw/include/stdlib.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 39 "h:/mingw/include/stdlib.h" 2 3
# 86 "h:/mingw/include/stdlib.h" 3
extern int _argc;
extern char** _argv;




extern int* __attribute__((__cdecl__)) __p___argc(void);
extern char*** __attribute__((__cdecl__)) __p___argv(void);
extern wchar_t*** __attribute__((__cdecl__)) __p___wargv(void);
# 152 "h:/mingw/include/stdlib.h" 3
 int* __attribute__((__cdecl__)) _errno(void);


 int* __attribute__((__cdecl__)) __doserrno(void);







  extern char *** __attribute__((__cdecl__)) __p__environ(void);
  extern wchar_t *** __attribute__((__cdecl__)) __p__wenviron(void);
# 186 "h:/mingw/include/stdlib.h" 3
  extern __attribute__((dllimport)) int _sys_nerr;
# 210 "h:/mingw/include/stdlib.h" 3
extern __attribute__((dllimport)) char* _sys_errlist[];
# 224 "h:/mingw/include/stdlib.h" 3
extern unsigned __attribute__((__cdecl__)) int* __p__osver(void);
extern unsigned __attribute__((__cdecl__)) int* __p__winver(void);
extern unsigned __attribute__((__cdecl__)) int* __p__winmajor(void);
extern unsigned __attribute__((__cdecl__)) int* __p__winminor(void);







extern __attribute__((dllimport)) unsigned int _osver;
extern __attribute__((dllimport)) unsigned int _winver;
extern __attribute__((dllimport)) unsigned int _winmajor;
extern __attribute__((dllimport)) unsigned int _winminor;
# 275 "h:/mingw/include/stdlib.h" 3
 char** __attribute__((__cdecl__)) __p__pgmptr(void);

 wchar_t** __attribute__((__cdecl__)) __p__wpgmptr(void);
# 308 "h:/mingw/include/stdlib.h" 3
extern __attribute__((dllimport)) int _fmode;
# 324 "h:/mingw/include/stdlib.h" 3
 double __attribute__((__cdecl__)) atof (const char*);
 int __attribute__((__cdecl__)) atoi (const char*);
 long __attribute__((__cdecl__)) atol (const char*);
 int __attribute__((__cdecl__)) _wtoi (const wchar_t *);
 long __attribute__((__cdecl__)) _wtol (const wchar_t *);

 double __attribute__((__cdecl__)) strtod (const char*, char**);

extern __inline__ float __attribute__((__cdecl__)) strtof (const char *nptr, char **endptr)
  { return (strtod (nptr, endptr));}
long double __attribute__((__cdecl__)) strtold (const char * __restrict__, char ** __restrict__);


 long __attribute__((__cdecl__)) strtol (const char*, char**, int);
 unsigned long __attribute__((__cdecl__)) strtoul (const char*, char**, int);



 double __attribute__((__cdecl__)) wcstod (const wchar_t*, wchar_t**);

extern __inline__ float __attribute__((__cdecl__)) wcstof( const wchar_t *nptr, wchar_t **endptr)
{ return (wcstod(nptr, endptr)); }
long double __attribute__((__cdecl__)) wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);


 long __attribute__((__cdecl__)) wcstol (const wchar_t*, wchar_t**, int);
 unsigned long __attribute__((__cdecl__)) wcstoul (const wchar_t*, wchar_t**, int);



 size_t __attribute__((__cdecl__)) wcstombs (char*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) wctomb (char*, wchar_t);

 int __attribute__((__cdecl__)) mblen (const char*, size_t);
 size_t __attribute__((__cdecl__)) mbstowcs (wchar_t*, const char*, size_t);
 int __attribute__((__cdecl__)) mbtowc (wchar_t*, const char*, size_t);

 int __attribute__((__cdecl__)) rand (void);
 void __attribute__((__cdecl__)) srand (unsigned int);

 void* __attribute__((__cdecl__)) calloc (size_t, size_t);
 void* __attribute__((__cdecl__)) malloc (size_t);
 void* __attribute__((__cdecl__)) realloc (void*, size_t);
 void __attribute__((__cdecl__)) free (void*);

 void __attribute__((__cdecl__)) abort (void) __attribute__ ((noreturn));
 void __attribute__((__cdecl__)) exit (int) __attribute__ ((noreturn));


int __attribute__((__cdecl__)) atexit (void (*)(void));

 int __attribute__((__cdecl__)) system (const char*);
 char* __attribute__((__cdecl__)) getenv (const char*);

 void* __attribute__((__cdecl__)) bsearch (const void*, const void*, size_t, size_t,
                                 int (*)(const void*, const void*));
 void __attribute__((__cdecl__)) qsort (void*, size_t, size_t,
                                 int (*)(const void*, const void*));

 int __attribute__((__cdecl__)) abs (int);
 long __attribute__((__cdecl__)) labs (long);
# 394 "h:/mingw/include/stdlib.h" 3
typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

 div_t __attribute__((__cdecl__)) div (int, int);
 ldiv_t __attribute__((__cdecl__)) ldiv (long, long);







 void __attribute__((__cdecl__)) _beep (unsigned int, unsigned int);
 void __attribute__((__cdecl__)) _seterrormode (int);
 void __attribute__((__cdecl__)) _sleep (unsigned long);

 void __attribute__((__cdecl__)) _exit (int) __attribute__ ((noreturn));


void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((noreturn));
extern __inline__ void __attribute__((__cdecl__)) _Exit(int status)
        { _exit(status); }



typedef int (* _onexit_t)(void);
_onexit_t __attribute__((__cdecl__)) _onexit( _onexit_t );

 int __attribute__((__cdecl__)) _putenv (const char*);
 void __attribute__((__cdecl__)) _searchenv (const char*, const char*, char*);


 char* __attribute__((__cdecl__)) _ecvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) _fcvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) _gcvt (double, int, char*);

 void __attribute__((__cdecl__)) _makepath (char*, const char*, const char*, const char*, const char*);
 void __attribute__((__cdecl__)) _splitpath (const char*, char*, char*, char*, char*);
 char* __attribute__((__cdecl__)) _fullpath (char*, const char*, size_t);


 char* __attribute__((__cdecl__)) _itoa (int, char*, int);
 char* __attribute__((__cdecl__)) _ltoa (long, char*, int);
 char* __attribute__((__cdecl__)) _ultoa(unsigned long, char*, int);
 wchar_t* __attribute__((__cdecl__)) _itow (int, wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _ltow (long, wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _ultow (unsigned long, wchar_t*, int);


 long long __attribute__((__cdecl__)) _atoi64(const char *);
 char* __attribute__((__cdecl__)) _i64toa(long long, char *, int);
 char* __attribute__((__cdecl__)) _ui64toa(unsigned long long, char *, int);
 long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *);
 wchar_t* __attribute__((__cdecl__)) _i64tow(long long, wchar_t *, int);
 wchar_t* __attribute__((__cdecl__)) _ui64tow(unsigned long long, wchar_t *, int);

 wchar_t* __attribute__((__cdecl__)) _wgetenv(const wchar_t*);
 int __attribute__((__cdecl__)) _wputenv(const wchar_t*);
 void __attribute__((__cdecl__)) _wsearchenv(const wchar_t*, const wchar_t*, wchar_t*);
 void __attribute__((__cdecl__)) _wmakepath(wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*);
 void __attribute__((__cdecl__)) _wsplitpath (const wchar_t*, wchar_t*, wchar_t*, wchar_t*, wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wfullpath (wchar_t*, const wchar_t*, size_t);

 unsigned int __attribute__((__cdecl__)) _rotl(unsigned int, int);
 unsigned int __attribute__((__cdecl__)) _rotr(unsigned int, int);
 unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long, int);
 unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long, int);




 int __attribute__((__cdecl__)) putenv (const char*);
 void __attribute__((__cdecl__)) searchenv (const char*, const char*, char*);

 char* __attribute__((__cdecl__)) itoa (int, char*, int);
 char* __attribute__((__cdecl__)) ltoa (long, char*, int);


 char* __attribute__((__cdecl__)) ecvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) fcvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) gcvt (double, int, char*);
# 484 "h:/mingw/include/stdlib.h" 3
typedef struct { long long quot, rem; } lldiv_t;

lldiv_t __attribute__((__cdecl__)) lldiv (long long, long long);

extern __inline__ long long __attribute__((__cdecl__)) llabs(long long _j)
  {return (_j >= 0 ? _j : -_j);}

long long __attribute__((__cdecl__)) strtoll (const char* __restrict__, char** __restrict, int);
unsigned long long __attribute__((__cdecl__)) strtoull (const char* __restrict__, char** __restrict__, int);


long long __attribute__((__cdecl__)) atoll (const char *);


long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
char* __attribute__((__cdecl__)) lltoa (long long, char *, int);
char* __attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
wchar_t* __attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
wchar_t* __attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);


extern __inline__ long long __attribute__((__cdecl__)) atoll (const char * _c)
        { return _atoi64 (_c); }
extern __inline__ char* __attribute__((__cdecl__)) lltoa (long long _n, char * _c, int _i)
        { return _i64toa (_n, _c, _i); }
extern __inline__ char* __attribute__((__cdecl__)) ulltoa (unsigned long long _n, char * _c, int _i)
        { return _ui64toa (_n, _c, _i); }
extern __inline__ long long __attribute__((__cdecl__)) wtoll (const wchar_t * _w)
        { return _wtoi64 (_w); }
extern __inline__ wchar_t* __attribute__((__cdecl__)) lltow (long long _n, wchar_t * _w, int _i)
        { return _i64tow (_n, _w, _i); }
extern __inline__ wchar_t* __attribute__((__cdecl__)) ulltow (unsigned long long _n, wchar_t * _w, int _i)
        { return _ui64tow (_n, _w, _i); }
# 536 "h:/mingw/include/stdlib.h" 3
# 1 "h:/mingw/mingw32/include/winx/stdlibx.h" 1 3
# 27 "h:/mingw/mingw32/include/winx/stdlibx.h" 3
extern int mkstemps (char *__template, int __suffix_len);

extern __inline__ int mkstemp (char *__template)
{
        return mkstemps (__template, 0);
}
# 41 "h:/mingw/mingw32/include/winx/stdlibx.h" 3
extern int mkstemp64 (char *__template) ;
# 55 "h:/mingw/mingw32/include/winx/stdlibx.h" 3
# 1 "h:/mingw/include/stdint.h" 1 3
# 24 "h:/mingw/include/stdint.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 25 "h:/mingw/include/stdint.h" 2 3


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
typedef long long int64_t;
typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
typedef long long int_least64_t;
typedef unsigned long long uint_least64_t;





typedef char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
typedef long long int_fast64_t;
typedef unsigned long long uint_fast64_t;


typedef int intptr_t;
typedef unsigned uintptr_t;


typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 189 "h:/mingw/include/stdint.h" 3
# 1 "h:/mingw/mingw32/include/winx/stdintx.h" 1 3
# 190 "h:/mingw/include/stdint.h" 2 3
# 56 "h:/mingw/mingw32/include/winx/stdlibx.h" 2 3
# 66 "h:/mingw/mingw32/include/winx/stdlibx.h" 3
extern char *canonicalize_file_name (const char *name);
extern char *realpath (const char *name, char *resolved);



 long long _strtoi64(const char *nptr, char **endptr, int base);
 long long _wcstoi64(const wchar_t *nptr, wchar_t **endptr, int base);
 unsigned long long _strtoui64(const char *nptr, char **endptr, int base);
 unsigned long long _wcstoui64(const wchar_t *nptr, wchar_t **endptr, int base);
# 100 "h:/mingw/mingw32/include/winx/stdlibx.h" 3
typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;






extern void *bsearch (__const void *__key, __const void *__base,
                size_t __nmemb, size_t __size, __compar_fn_t __compar);



extern void qsort (void *__base, size_t __nmemb, size_t __size,
             __compar_fn_t __compar);





extern struct drand48_data __libc_drand48_data;







extern long int random (void) ;


extern void srandom (unsigned int __seed) ;





extern char *initstate (unsigned int __seed, char *__statebuf,
               size_t __statelen) ;



extern char *setstate (char *__statebuf) ;







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
               int32_t *__restrict __result) ;

extern int srandom_r (unsigned int __seed, struct random_data *__buf) ;

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
               size_t __statelen,
               struct random_data *__restrict __buf) ;

extern int setstate_r (char *__restrict __statebuf,
                 struct random_data *__restrict __buf) ;






extern int rand (void) ;

extern void srand (unsigned int __seed) ;




extern int rand_r (unsigned int *__seed) ;







extern double drand48 (void) ;
extern double erand48 (unsigned short int __xsubi[3]) ;


extern long int lrand48 (void) ;
extern long int nrand48 (unsigned short int __xsubi[3]) ;


extern long int mrand48 (void) ;
extern long int jrand48 (unsigned short int __xsubi[3]) ;


extern void srand48 (long int __seedval) ;
extern unsigned short int *seed48 (unsigned short int __seed16v[3]) ;
extern void lcong48 (unsigned short int __param[7]) ;





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
                double *__restrict __result) ;
extern int erand48_r (unsigned short int __xsubi[3],
                struct drand48_data *__restrict __buffer,
                double *__restrict __result) ;


extern int lrand48_r (struct drand48_data *__restrict __buffer,
                long int *__restrict __result) ;
extern int nrand48_r (unsigned short int __xsubi[3],
                struct drand48_data *__restrict __buffer,
                long int *__restrict __result) ;


extern int mrand48_r (struct drand48_data *__restrict __buffer,
                long int *__restrict __result) ;
extern int jrand48_r (unsigned short int __xsubi[3],
                struct drand48_data *__restrict __buffer,
                long int *__restrict __result) ;


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     ;

extern int seed48_r (unsigned short int __seed16v[3],
               struct drand48_data *__buffer) ;

extern int lcong48_r (unsigned short int __param[7],
                struct drand48_data *__buffer) ;
# 537 "h:/mingw/include/stdlib.h" 2 3
# 9 "h:/mingw/mingw32/include/winx/iox.h" 2 3
# 1 "../lib/getopt.h" 1 3
# 36 "../lib/getopt.h" 3
extern char *optarg;
# 50 "../lib/getopt.h" 3
extern int optind;




extern int opterr;



extern int optopt;
# 83 "../lib/getopt.h" 3
struct option
{

  const char *name;





  int has_arg;
  int *flag;
  int val;
};
# 134 "../lib/getopt.h" 3
extern int getopt (int (*__p___argc()), char *const *(*__p___argv()), const char *__shortopts);





extern int getopt_long (int (*__p___argc()), char *const *(*__p___argv()), const char *__shortopts,
                        const struct option *__longopts, int *__longind);
extern int getopt_long_only (int (*__p___argc()), char *const *(*__p___argv()),
                             const char *__shortopts,
                             const struct option *__longopts, int *__longind);


extern int _getopt_internal (int (*__p___argc()), char *const *(*__p___argv()),
                             const char *__shortopts,
                             const struct option *__longopts, int *__longind,
                             int __long_only);
# 10 "h:/mingw/mingw32/include/winx/iox.h" 2 3






# 1 "h:/mingw/include/fcntl.h" 1 3
# 39 "h:/mingw/include/fcntl.h" 3
# 1 "h:/mingw/include/io.h" 1 3
# 301 "h:/mingw/include/io.h" 3
# 1 "h:/mingw/mingw32/include/winx/iox.h" 1 3
# 302 "h:/mingw/include/io.h" 2 3
# 40 "h:/mingw/include/fcntl.h" 2 3
# 92 "h:/mingw/include/fcntl.h" 3
# 1 "h:/mingw/mingw32/include/winx/fcntlx.h" 1 3







# 1 "h:/mingw/mingw32/include/bits/fcntl.h" 1 3
# 73 "h:/mingw/mingw32/include/bits/fcntl.h" 3
struct flock
  {
    short int l_type;
    short int l_whence;
    __off_t l_start;
    __off_t l_len;
    __pid_t l_pid;
  };
# 9 "h:/mingw/mingw32/include/winx/fcntlx.h" 2 3
# 36 "h:/mingw/mingw32/include/winx/fcntlx.h" 3
extern int __open (__const char *__file, int __oflag, ...) __asm__ ("_" "_open");






extern int __open64 (__const char *__file, int __oflag, ...) __asm__ ("_" "_open");

extern int open64 (__const char *__file, int __oflag, ...) __asm__ ("_" "_open");
# 93 "h:/mingw/include/fcntl.h" 2 3
# 17 "h:/mingw/mingw32/include/winx/iox.h" 2 3





# 1 "h:/mingw/include/sys/types.h" 1 3
# 23 "h:/mingw/mingw32/include/winx/iox.h" 2 3
# 32 "h:/mingw/mingw32/include/winx/iox.h" 3
extern int truncate (__const char *__file, __off_t __length) ;
# 43 "h:/mingw/mingw32/include/winx/iox.h" 3
extern int truncate64 (__const char *__file, __off64_t __length) ;




extern __inline__ int ftruncate (int __fd, __off_t __length)
{
        return _chsize(__fd, (long) __length);
}
# 61 "h:/mingw/mingw32/include/winx/iox.h" 3
extern int ftruncate64 (int __fd, __off64_t __length) ;
# 71 "h:/mingw/mingw32/include/winx/iox.h" 3
extern __inline__ unsigned int sleep (unsigned int __seconds)
{
        _sleep((__seconds) * 1000);
        return 0;
}




extern __inline__ int pipe (int __pipedes[2])
{
        return _pipe(__pipedes, 0, 0x8000 | 0x0080);
}


extern __inline__ int fsync (int __fd)
{
        return _commit(__fd);
}
# 99 "h:/mingw/mingw32/include/winx/iox.h" 3
extern __inline__ char *__getcwd (char *__buf, size_t __size)
{
        return _getcwd (__buf, (int) __size);
}







extern __inline__ __off_t lseek (int __fd, __off_t __offset, int __whence)
{
        return (__off_t) _lseek (__fd, (long) __offset, __whence);
}
# 125 "h:/mingw/mingw32/include/winx/iox.h" 3
extern __inline__ __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
{
        return (__off64_t) _lseeki64 (__fd, (long long) __offset, __whence);
}




int mkstemps(char *, int );
# 302 "h:/mingw/include/io.h" 2 3
# 40 "h:/mingw/include/fcntl.h" 2 3
# 101 "system.h" 2
# 141 "system.h"
# 1 "h:/mingw/include/sys/stat.h" 1 3
# 39 "h:/mingw/include/sys/stat.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 40 "h:/mingw/include/sys/stat.h" 2 3


# 1 "h:/mingw/include/sys/types.h" 1 3
# 43 "h:/mingw/include/sys/stat.h" 2 3
# 104 "h:/mingw/include/sys/stat.h" 3
struct _stat
{
        _dev_t st_dev;
        _ino_t st_ino;
        _mode_t st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;

        time_t st_mtime;
        time_t st_ctime;
};
# 136 "h:/mingw/include/sys/stat.h" 3
struct _stati64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    long long st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
};
# 157 "h:/mingw/include/sys/stat.h" 3
 int __attribute__((__cdecl__)) _fstat (int, struct _stat*);
 int __attribute__((__cdecl__)) _chmod (const char*, int);
 int __attribute__((__cdecl__)) _stat (const char*, struct _stat*);


 int __attribute__((__cdecl__)) _fstati64(int, struct _stati64 *);
 int __attribute__((__cdecl__)) _stati64(const char *, struct _stati64 *);

 int __attribute__((__cdecl__)) _wstat(const wchar_t*, struct _stat*);
 int __attribute__((__cdecl__)) _wstati64 (const wchar_t*, struct _stati64*);
# 191 "h:/mingw/include/sys/stat.h" 3
# 1 "h:/mingw/mingw32/include/winx/sys/statx.h" 1 3
# 10 "h:/mingw/mingw32/include/winx/sys/statx.h" 3
# 1 "h:/mingw/mingw32/include/bits/stat.h" 1 3
# 29 "h:/mingw/mingw32/include/bits/stat.h" 3
struct stat
  {


    __mode_t st_mode;

    __ino_t st_ino;



    __dev_t st_dev;
    __nlink_t st_nlink;

    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;

    __off_t st_size;




    __time_t st_atime;
    __time_t st_mtime;
    __time_t st_ctime;



  };
# 85 "h:/mingw/mingw32/include/bits/stat.h" 3
struct stat64
  {
    __mode_t st_mode;
    __ino64_t st_ino;
    __dev_t st_dev;
    __nlink_t st_nlink;

    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    __off64_t st_size;

    __time_t st_atime;
    __time_t st_mtime;
    __time_t st_ctime;
  };
# 11 "h:/mingw/mingw32/include/winx/sys/statx.h" 2 3

# 1 "h:/mingw/include/io.h" 1 3
# 13 "h:/mingw/mingw32/include/winx/sys/statx.h" 2 3
# 131 "h:/mingw/mingw32/include/winx/sys/statx.h" 3
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf) ;
extern int __xstat (int __ver, __const char *__filename,
              struct stat *__stat_buf) ;
extern int __lxstat (int __ver, __const char *__filename,
               struct stat *__stat_buf) ;
# 155 "h:/mingw/mingw32/include/winx/sys/statx.h" 3
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     ;
extern int __xstat64 (int __ver, __const char *__filename,
                struct stat64 *__stat_buf) ;


extern int __lxstat64 (int __ver, __const char *__filename,
                 struct stat64 *__stat_buf) ;

extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
               __dev_t *__dev) ;





extern __inline__ int stat (__const char *__path,
                    struct stat *__statbuf)
{

  return __xstat (0, __path, __statbuf);
}
# 190 "h:/mingw/mingw32/include/winx/sys/statx.h" 3
extern __inline__ int lstat (__const char *__path,
                    struct stat *__statbuf)
{

  return __lxstat (0, __path, __statbuf);
}
# 209 "h:/mingw/mingw32/include/winx/sys/statx.h" 3
extern
__inline__ int fstat (int __fd, struct stat *__statbuf)
{
  return __fxstat (0, __fd, __statbuf);
}


extern __inline__ int mknod (__const char *__path, __mode_t __mode,
                    __dev_t __dev)
{
  return __xmknod (0, __path, __mode, &__dev);
}





extern __inline__ int stat64 (__const char *__path,
                     struct stat64 *__statbuf)
{
  return __xstat64 (0, __path, __statbuf);
}


extern __inline__ int lstat64 (__const char *__path,
                      struct stat64 *__statbuf)
{
  return __lxstat64 (0, __path, __statbuf);
}


extern __inline__ int fstat64 (int __fd, struct stat64 *__statbuf)
{
  return __fxstat64 (0, __fd, __statbuf);
}





extern __inline__ int __mkdir (__const char *__path, __mode_t __mode)
{
        return _mkdir(__path);
}





extern int fchmod (int __fd, __mode_t __mode) ;


extern void stat64_to_32(struct stat64 *buf64, struct stat *buf32);
# 192 "h:/mingw/include/sys/stat.h" 2 3
# 142 "system.h" 2
# 252 "system.h"
# 1 "h:/mingw/include/unistd.h" 1 3
# 9 "h:/mingw/include/unistd.h" 3
# 1 "h:/mingw/include/io.h" 1 3
# 10 "h:/mingw/include/unistd.h" 2 3
# 1 "h:/mingw/include/process.h" 1 3
# 36 "h:/mingw/include/process.h" 3
# 1 "h:/mingw/include/sys/types.h" 1 3
# 37 "h:/mingw/include/process.h" 2 3
# 76 "h:/mingw/include/process.h" 3
 void __attribute__((__cdecl__)) _cexit(void);
 void __attribute__((__cdecl__)) _c_exit(void);

 int __attribute__((__cdecl__)) _cwait (int*, _pid_t, int);

 _pid_t __attribute__((__cdecl__)) _getpid(void);

 int __attribute__((__cdecl__)) _execl (const char*, const char*, ...);
 int __attribute__((__cdecl__)) _execle (const char*, const char*, ...);
 int __attribute__((__cdecl__)) _execlp (const char*, const char*, ...);
 int __attribute__((__cdecl__)) _execlpe (const char*, const char*, ...);
 int __attribute__((__cdecl__)) _execv (const char*, char* const*);
 int __attribute__((__cdecl__)) _execve (const char*, char* const*, char* const*);
 int __attribute__((__cdecl__)) _execvp (const char*, char* const*);
 int __attribute__((__cdecl__)) _execvpe (const char*, char* const*, char* const*);

 int __attribute__((__cdecl__)) _spawnl (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) _spawnle (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) _spawnlp (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) _spawnlpe (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) _spawnv (int, const char*, char* const*);
 int __attribute__((__cdecl__)) _spawnve (int, const char*, char* const*, char* const*);
 int __attribute__((__cdecl__)) _spawnvp (int, const char*, char* const*);
 int __attribute__((__cdecl__)) _spawnvpe (int, const char*, char* const*, char* const*);
# 112 "h:/mingw/include/process.h" 3
 unsigned long __attribute__((__cdecl__))
        _beginthread (void (*)(void *), unsigned, void*);
 void __attribute__((__cdecl__)) _endthread (void);


 unsigned long __attribute__((__cdecl__))
        _beginthreadex (void *, unsigned, unsigned (__attribute__((__stdcall__)) *) (void *),
                         void*, unsigned, unsigned*);
 void __attribute__((__cdecl__)) _endthreadex (unsigned);
# 129 "h:/mingw/include/process.h" 3
 int __attribute__((__cdecl__)) cwait (int*, pid_t, int);
 pid_t __attribute__((__cdecl__)) getpid (void);
 int __attribute__((__cdecl__)) execl (const char*, const char*, ...);
 int __attribute__((__cdecl__)) execle (const char*, const char*, ...);
 int __attribute__((__cdecl__)) execlp (const char*, const char*, ...);
 int __attribute__((__cdecl__)) execlpe (const char*, const char*, ...);
 int __attribute__((__cdecl__)) execv (const char*, char* const*);
 int __attribute__((__cdecl__)) execve (const char*, char* const*, char* const*);
 int __attribute__((__cdecl__)) execvp (const char*, char* const*);
 int __attribute__((__cdecl__)) execvpe (const char*, char* const*, char* const*);
 int __attribute__((__cdecl__)) spawnl (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) spawnle (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) spawnlp (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) spawnlpe (int, const char*, const char*, ...);
 int __attribute__((__cdecl__)) spawnv (int, const char*, char* const*);
 int __attribute__((__cdecl__)) spawnve (int, const char*, char* const*, char* const*);
 int __attribute__((__cdecl__)) spawnvp (int, const char*, char* const*);
 int __attribute__((__cdecl__)) spawnvpe (int, const char*, char* const*, char* const*);
# 11 "h:/mingw/include/unistd.h" 2 3







# 1 "h:/mingw/mingw32/include/winx/unistdx.h" 1 3
# 84 "h:/mingw/mingw32/include/winx/unistdx.h" 3
# 1 "h:/mingw/include/sys/types.h" 1 3
# 85 "h:/mingw/mingw32/include/winx/unistdx.h" 2 3
# 1 "h:/mingw/include/process.h" 1 3
# 86 "h:/mingw/mingw32/include/winx/unistdx.h" 2 3







extern int __close (int __fd) __asm__ ("_" "_close");
# 105 "h:/mingw/mingw32/include/winx/unistdx.h" 3
extern int __libc_enable_secure;







extern __uid_t getuid (void) ;


extern __uid_t geteuid (void) ;


extern __gid_t getgid (void) ;


extern __gid_t getegid (void) ;




extern int getgroups (int __size, __gid_t __list[]) ;



extern int group_member (__gid_t __gid) ;






extern int setuid (__uid_t __uid) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) ;




extern int seteuid (__uid_t __uid) ;






extern int setgid (__gid_t __gid) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) ;




extern int setegid (__gid_t __gid) ;



extern __uid_t getuid (void) ;


extern __uid_t geteuid (void) ;


extern __gid_t getgid (void) ;


extern __gid_t getegid (void) ;




extern int getgroups (int __size, __gid_t __list[]) ;



extern int group_member (__gid_t __gid) ;






extern int setuid (__uid_t __uid) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) ;




extern int seteuid (__uid_t __uid) ;






extern int setgid (__gid_t __gid) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) ;




extern int setegid (__gid_t __gid) ;







# 1 "h:/mingw/mingw32/include/bits/confname.h" 1 3
# 25 "h:/mingw/mingw32/include/bits/confname.h" 3
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,


    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

  };
# 230 "h:/mingw/mingw32/include/winx/unistdx.h" 2 3


extern long int pathconf (__const char *__path, int __name) ;


extern long int fpathconf (int __fd, int __name) ;


extern long int sysconf (int __name) __attribute__ ((__const__));
# 19 "h:/mingw/include/unistd.h" 2 3
# 253 "system.h" 2
# 285 "system.h"
# 1 "h:/mingw/mingw32/include/sys/sysmacros.h" 1 3
# 286 "system.h" 2
# 326 "system.h"
# 1 "h:/mingw/include/dirent.h" 1 3





# 1 "h:/mingw/mingw32/include/dirstream.h" 1 3
# 23 "h:/mingw/mingw32/include/dirstream.h" 3
# 1 "h:/mingw/include/sys/types.h" 1 3
# 24 "h:/mingw/mingw32/include/dirstream.h" 2 3

# 1 "h:/mingw/mingw32/include/bits/libc-lock.h" 1 3
# 124 "h:/mingw/mingw32/include/bits/libc-lock.h" 3
typedef int __libc_key_t;
# 26 "h:/mingw/mingw32/include/dirstream.h" 2 3






struct __dirstream
  {
    int fd;

    char *data;
    size_t allocation;
    size_t size;
    size_t offset;

    off_t filepos;

   
  };
# 7 "h:/mingw/include/dirent.h" 2 3
# 1 "h:/mingw/mingw32/include/winx/direntx.h" 1 3







# 1 "h:/mingw/include/sys/types.h" 1 3
# 9 "h:/mingw/mingw32/include/winx/direntx.h" 2 3



# 1 "h:/mingw/mingw32/include/bits/dirent.h" 1 3
# 24 "h:/mingw/mingw32/include/bits/dirent.h" 3
struct dirent
  {

    __ino_t d_ino;



    unsigned short int d_reclen;
    unsigned char d_type;
    unsigned char d_namlen;


    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    unsigned short int d_reclen;
    unsigned char d_type;
    unsigned char d_namlen;

    char d_name[256];
  };
# 13 "h:/mingw/mingw32/include/winx/direntx.h" 2 3
# 50 "h:/mingw/mingw32/include/winx/direntx.h" 3
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 79 "h:/mingw/mingw32/include/winx/direntx.h" 3
typedef struct __dirstream DIR;



extern DIR *opendir (__const char *__name) ;



extern int closedir (DIR *__dirp) ;
# 97 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern struct dirent *readdir (DIR *__dirp) ;
# 107 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern struct dirent64 *readdir64 (DIR *__dirp) ;






extern int readdir_r (DIR *__restrict __dirp,
                struct dirent *__restrict __entry,
                struct dirent **__restrict __result) ;
# 130 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern int readdir64_r (DIR *__restrict __dirp,
               struct dirent64 *__restrict __entry,
               struct dirent64 **__restrict __result) ;




extern void rewinddir (DIR *__dirp) ;





extern void seekdir (DIR *__dirp, long int __pos) ;


extern long int telldir (DIR *__dirp) ;





extern int dirfd (DIR *__dirp) ;







# 1 "h:/mingw/mingw32/include/bits/posix1_lim.h" 1 3
# 126 "h:/mingw/mingw32/include/bits/posix1_lim.h" 3
# 1 "h:/mingw/mingw32/include/bits/local_lim.h" 1 3
# 127 "h:/mingw/mingw32/include/bits/posix1_lim.h" 2 3
# 161 "h:/mingw/mingw32/include/winx/direntx.h" 2 3
# 171 "h:/mingw/mingw32/include/winx/direntx.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 172 "h:/mingw/mingw32/include/winx/direntx.h" 2 3






extern int scandir (__const char *__restrict __dir,
              struct dirent ***__restrict __namelist,
              int (*__selector) (__const struct dirent *),
              int (*__cmp) (__const void *, __const void *)) ;
# 198 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern int scandir64 (__const char *__restrict __dir,
                struct dirent64 ***__restrict __namelist,
                int (*__selector) (__const struct dirent64 *),
                int (*__cmp) (__const void *, __const void *)) ;




extern int alphasort (__const void *__e1, __const void *__e2)
     __attribute__ ((__pure__));
# 220 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern int alphasort64 (__const void *__e1, __const void *__e2)
     __attribute__ ((__pure__));





extern int versionsort (__const void *__e1, __const void *__e2)
     __attribute__ ((__pure__));
# 241 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern int versionsort64 (__const void *__e1, __const void *__e2)
     __attribute__ ((__pure__));
# 251 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
                    size_t __nbytes,
                    __off_t *__restrict __basep) ;
# 267 "h:/mingw/mingw32/include/winx/direntx.h" 3
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
                      size_t __nbytes,
                      __off64_t *__restrict __basep) ;





# 8 "h:/mingw/include/dirent.h" 2 3
# 327 "system.h" 2
# 346 "system.h"
# 1 "h:/mingw/mingw32/include/sys/wait.h" 1 3
# 28 "h:/mingw/mingw32/include/sys/wait.h" 3


# 1 "h:/mingw/include/signal.h" 1 3
# 62 "h:/mingw/include/signal.h" 3
typedef int sig_atomic_t;
# 76 "h:/mingw/include/signal.h" 3
typedef void (*__p_sig_fn_t)(int);
# 97 "h:/mingw/include/signal.h" 3
 __p_sig_fn_t __attribute__((__cdecl__)) signal(int, __p_sig_fn_t);




 int __attribute__((__cdecl__)) raise (int);
# 112 "h:/mingw/include/signal.h" 3
# 1 "h:/mingw/mingw32/include/winx/signalx.h" 1 3



# 1 "h:/mingw/mingw32/include/winx/sys/signalx.h" 1 3



# 1 "h:/mingw/include/sys/types.h" 1 3
# 5 "h:/mingw/mingw32/include/winx/sys/signalx.h" 2 3
# 1 "h:/mingw/mingw32/include/bits/sigset.h" 1 3
# 23 "h:/mingw/mingw32/include/bits/sigset.h" 3
typedef int __sig_atomic_t;


typedef unsigned long int __sigset_t;
# 6 "h:/mingw/mingw32/include/winx/sys/signalx.h" 2 3
# 39 "h:/mingw/mingw32/include/winx/sys/signalx.h" 3
typedef void (*__sighandler_t) (int);

struct sigaction
  {

    __sighandler_t sa_handler;

    __sigset_t sa_mask;

    int sa_flags;
  };



struct sigstack
  {
    void * ss_sp;
    int ss_onstack;
  };



typedef struct sigaltstack
  {
    void * ss_sp;
    size_t ss_size;
    int ss_flags;
  } stack_t;
# 5 "h:/mingw/mingw32/include/winx/signalx.h" 2 3
# 113 "h:/mingw/include/signal.h" 2 3
# 31 "h:/mingw/mingw32/include/sys/wait.h" 2 3
# 1 "h:/mingw/mingw32/include/sys/resource.h" 1 3
# 25 "h:/mingw/mingw32/include/sys/resource.h" 3
# 1 "h:/mingw/mingw32/include/bits/resource.h" 1 3
# 32 "h:/mingw/mingw32/include/bits/resource.h" 3
enum __rlimit_resource
  {

    RLIMIT_CPU,


    RLIMIT_FSIZE,


    RLIMIT_DATA,


    RLIMIT_STACK,


    RLIMIT_CORE,





    RLIMIT_RSS,


    RLIMIT_MEMLOCK,


    RLIMIT_NPROC,


    RLIMIT_OFILE,
    RLIMIT_NOFILE = RLIMIT_OFILE,



    RLIMIT_NLIMITS,
    RLIM_NLIMITS = RLIMIT_NLIMITS
  };
# 85 "h:/mingw/mingw32/include/bits/resource.h" 3
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who



  {

    RUSAGE_SELF = 0,


    RUSAGE_CHILDREN = -1

  };


# 1 "h:/mingw/mingw32/include/bits/time.h" 1 3
# 67 "h:/mingw/mingw32/include/bits/time.h" 3
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 127 "h:/mingw/mingw32/include/bits/resource.h" 2 3


struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    long int ru_maxrss;


    long int ru_ixrss;

    long int ru_idrss;

    long int ru_isrss;


    long int ru_minflt;

    long int ru_majflt;

    long int ru_nswap;


    long int ru_inblock;

    long int ru_oublock;

    long int ru_msgsnd;

    long int ru_msgrcv;

    long int ru_nsignals;



    long int ru_nvcsw;


    long int ru_nivcsw;
  };







enum __priority_which
  {
    PRIO_PROCESS = 0,
    PRIO_PGRP = 1,
    PRIO_USER = 2
  };
# 26 "h:/mingw/mingw32/include/sys/resource.h" 2 3


typedef __id_t id_t;










typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
# 51 "h:/mingw/mingw32/include/sys/resource.h" 3
extern int getrlimit (__rlimit_resource_t __resource,
                      struct rlimit *__rlimits) ;
# 63 "h:/mingw/mingw32/include/sys/resource.h" 3
extern int getrlimit64 (__rlimit_resource_t __resource,
                        struct rlimit64 *__rlimits) ;






extern int setrlimit (__rlimit_resource_t __resource,
                      __const struct rlimit *__rlimits) ;
# 83 "h:/mingw/mingw32/include/sys/resource.h" 3
extern int setrlimit64 (__rlimit_resource_t __resource,
                        __const struct rlimit64 *__rlimits) ;




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) ;





extern int getpriority (__priority_which_t __which, id_t __who) ;



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     ;


# 32 "h:/mingw/mingw32/include/sys/wait.h" 2 3





# 1 "h:/mingw/mingw32/include/bits/waitflags.h" 1 3
# 38 "h:/mingw/mingw32/include/sys/wait.h" 2 3
# 62 "h:/mingw/mingw32/include/sys/wait.h" 3
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 79 "h:/mingw/mingw32/include/sys/wait.h" 3
# 1 "h:/mingw/mingw32/include/bits/waitstatus.h" 1 3
# 65 "h:/mingw/mingw32/include/bits/waitstatus.h" 3
union wait
  {
    int w_status;
    struct
      {

        unsigned int __w_termsig:7;
        unsigned int __w_coredump:1;
        unsigned int __w_retcode:8;
        unsigned int:16;







      } __wait_terminated;
    struct
      {

        unsigned int __w_stopval:8;
        unsigned int __w_stopsig:8;
        unsigned int:16;






      } __wait_stopped;
  };
# 80 "h:/mingw/mingw32/include/sys/wait.h" 2 3
# 98 "h:/mingw/mingw32/include/sys/wait.h" 3
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;





extern __pid_t wait (__WAIT_STATUS __stat_loc) ;
# 129 "h:/mingw/mingw32/include/sys/wait.h" 3
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options) ;



# 1 "h:/mingw/mingw32/include/bits/siginfo.h" 1 3
# 31 "h:/mingw/mingw32/include/bits/siginfo.h" 3
typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;






typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;
    __pid_t si_pid;
    __uid_t si_uid;
    void *si_addr;
    int si_status;
    long int si_band;
    union sigval si_value;
  } siginfo_t;




enum
{
  SI_ASYNCIO = -4,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILL_OPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 191 "h:/mingw/mingw32/include/bits/siginfo.h" 3
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;
    void (*sigev_notify_function) (sigval_t);
    void *sigev_notify_attributes;
  } sigevent_t;


enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD

};
# 134 "h:/mingw/mingw32/include/sys/wait.h" 2 3
# 142 "h:/mingw/mingw32/include/sys/wait.h" 3
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
                   int __options) ;





struct rusage;






extern __pid_t wait3 (__WAIT_STATUS __stat_loc, int __options,
                      struct rusage * __usage) ;





struct rusage;


extern __pid_t wait4 (__pid_t __pid, __WAIT_STATUS __stat_loc, int __options,
                      struct rusage *__usage) ;







# 1 "h:/mingw/mingw32/include/winx/sys/waitx.h" 1 3
# 176 "h:/mingw/mingw32/include/sys/wait.h" 2 3
# 347 "system.h" 2
# 476 "system.h"
# 1 "h:/mingw/include/stdlib.h" 1 3
# 477 "system.h" 2
# 486 "system.h"
# 1 "h:/mingw/include/stdio.h" 1 3
# 487 "system.h" 2
# 496 "system.h"
# 1 "../lib/pathmax.h" 1
# 22 "../lib/pathmax.h"
# 1 "h:/mingw/include/unistd.h" 1 3
# 9 "h:/mingw/include/unistd.h" 3
# 1 "h:/mingw/include/io.h" 1 3
# 10 "h:/mingw/include/unistd.h" 2 3
# 1 "h:/mingw/include/process.h" 1 3
# 11 "h:/mingw/include/unistd.h" 2 3
# 23 "../lib/pathmax.h" 2






# 1 "h:/mingw/include/limits.h" 1 3
# 116 "h:/mingw/include/limits.h" 3
# 1 "h:/mingw/mingw32/include/winx/limitsx.h" 1 3
# 27 "h:/mingw/mingw32/include/winx/limitsx.h" 3
# 1 "h:/mingw/mingw32/include/bits/xopen_lim.h" 1 3
# 34 "h:/mingw/mingw32/include/bits/xopen_lim.h" 3
# 1 "h:/mingw/mingw32/include/bits/stdio_lim.h" 1 3
# 35 "h:/mingw/mingw32/include/bits/xopen_lim.h" 2 3
# 28 "h:/mingw/mingw32/include/winx/limitsx.h" 2 3
# 117 "h:/mingw/include/limits.h" 2 3
# 30 "../lib/pathmax.h" 2
# 497 "system.h" 2
# 505 "system.h"
# 1 "h:/mingw/include/limits.h" 1 3
# 506 "system.h" 2
# 521 "system.h"
# 1 "h:/mingw/include/inttypes.h" 1 3





# 1 "h:/mingw/include/stdint.h" 1 3
# 7 "h:/mingw/include/inttypes.h" 2 3

# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 9 "h:/mingw/include/inttypes.h" 2 3





typedef struct {
        intmax_t quot;
        intmax_t rem;
        } imaxdiv_t;
# 257 "h:/mingw/include/inttypes.h" 3
extern __inline__ intmax_t __attribute__((__cdecl__)) imaxabs (intmax_t j)
        {return (j >= 0 ? j : -j);}
imaxdiv_t __attribute__((__cdecl__)) imaxdiv (intmax_t numer, intmax_t denom);



intmax_t __attribute__((__cdecl__)) strtoimax (const char* __restrict__ nptr,
                            char** __restrict__ endptr, int base);
uintmax_t __attribute__((__cdecl__)) strtoumax (const char* __restrict__ nptr,
                             char** __restrict__ endptr, int base);

intmax_t __attribute__((__cdecl__)) wcstoimax (const wchar_t* __restrict__ nptr,
                            wchar_t** __restrict__ endptr, int base);
uintmax_t __attribute__((__cdecl__)) wcstoumax (const wchar_t* __restrict__ nptr,
                             wchar_t** __restrict__ endptr, int base);
# 522 "system.h" 2
# 554 "system.h"
# 1 "h:/mingw/include/locale.h" 1 3
# 56 "h:/mingw/include/locale.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 57 "h:/mingw/include/locale.h" 2 3




struct lconv
{
        char* decimal_point;
        char* thousands_sep;
        char* grouping;
        char* int_curr_symbol;
        char* currency_symbol;
        char* mon_decimal_point;
        char* mon_thousands_sep;
        char* mon_grouping;
        char* positive_sign;
        char* negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
};





 char* __attribute__((__cdecl__)) setlocale (int, const char*);
 struct lconv* __attribute__((__cdecl__)) localeconv (void);



# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 93 "h:/mingw/include/locale.h" 2 3
  wchar_t* __attribute__((__cdecl__)) _wsetlocale(int, const wchar_t*);
# 105 "h:/mingw/include/locale.h" 3
# 1 "h:/mingw/mingw32/include/winx/localex.h" 1 3
# 106 "h:/mingw/include/locale.h" 2 3
# 555 "system.h" 2






# 1 "h:/mingw/mingw32/include/libintl.h" 1 3
# 22 "h:/mingw/mingw32/include/libintl.h" 3
# 1 "h:/mingw/include/locale.h" 1 3
# 23 "h:/mingw/mingw32/include/libintl.h" 2 3
# 128 "h:/mingw/mingw32/include/libintl.h" 3
extern char *gettext (const char *__msgid)
       __asm__ ("_" "libintl_gettext");
# 144 "h:/mingw/mingw32/include/libintl.h" 3
extern char *dgettext (const char *__domainname, const char *__msgid)

       __asm__ ("_" "libintl_dgettext");
# 163 "h:/mingw/mingw32/include/libintl.h" 3
extern char *dcgettext (const char *__domainname, const char *__msgid, int __category)


       __asm__ ("_" "libintl_dcgettext");
# 184 "h:/mingw/mingw32/include/libintl.h" 3
extern char *ngettext (const char *__msgid1, const char *__msgid2, unsigned long int __n)


       __asm__ ("_" "libintl_ngettext");
# 204 "h:/mingw/mingw32/include/libintl.h" 3
extern char *dngettext (const char *__domainname, const char *__msgid1, const char *__msgid2, unsigned long int __n)



       __asm__ ("_" "libintl_dngettext");
# 227 "h:/mingw/mingw32/include/libintl.h" 3
extern char *dcngettext (const char *__domainname, const char *__msgid1, const char *__msgid2, unsigned long int __n, int __category)




       __asm__ ("_" "libintl_dcngettext");
# 249 "h:/mingw/mingw32/include/libintl.h" 3
extern char *textdomain (const char *__domainname)
       __asm__ ("_" "libintl_textdomain");
# 267 "h:/mingw/mingw32/include/libintl.h" 3
extern char *bindtextdomain (const char *__domainname, const char *__dirname)

       __asm__ ("_" "libintl_bindtextdomain");
# 286 "h:/mingw/mingw32/include/libintl.h" 3
extern char *bind_textdomain_codeset (const char *__domainname, const char *__codeset)

       __asm__ ("_" "libintl_bind_textdomain_codeset");
# 562 "system.h" 2
# 574 "system.h"
# 1 "../lib/error.h" 1
# 49 "../lib/error.h"
extern void error (int status, int errnum, const char *format, ...)
     __attribute__ ((__format__ (__printf__, 3, 4)));

extern void error_at_line (int status, int errnum, const char *fname,
                           unsigned int lineno, const char *format, ...)
     __attribute__ ((__format__ (__printf__, 5, 6)));




extern void (*error_print_progname) (void);
# 68 "../lib/error.h"
extern unsigned int error_message_count;



extern int error_one_per_line;
# 575 "system.h" 2
# 588 "system.h"
void * xmalloc (size_t);
void * xrealloc (void *, size_t);
char *xstrdup (const char *);
# 23 "list.c" 2
# 1 "../lib/quotearg.h" 1
# 21 "../lib/quotearg.h"
enum quoting_style
  {
    literal_quoting_style,
    shell_quoting_style,
    shell_always_quoting_style,
    c_quoting_style,
    escape_quoting_style
  };
# 37 "../lib/quotearg.h"
extern char const *const quoting_style_args[];
extern enum quoting_style const quoting_style_vals[];

struct quoting_options;
# 56 "../lib/quotearg.h"
struct quoting_options *clone_quoting_options
   (struct quoting_options *o);


enum quoting_style get_quoting_style (struct quoting_options *o);



void set_quoting_style (struct quoting_options *o, enum quoting_style s);







int set_char_quoting (struct quoting_options *o, char c, int i);
# 82 "../lib/quotearg.h"
size_t quotearg_buffer (char *buffer, size_t buffersize, char const *arg, size_t argsize, struct quoting_options const *o);
# 91 "../lib/quotearg.h"
char *quotearg_n (unsigned int n, char const *arg);


char *quotearg (char const *arg);


char *quotearg_char (char const *arg, char ch);


char *quotearg_colon (char const *arg);
# 24 "list.c" 2

# 1 "h:/mingw/include/time.h" 1 3
# 37 "h:/mingw/include/time.h" 3
# 1 "h:/mingw/include/stddef.h" 1 3





# 1 "h:/mingw/lib/gcc-lib/mingw32/3.2.3/include/stddef.h" 1 3
# 7 "h:/mingw/include/stddef.h" 2 3
# 38 "h:/mingw/include/time.h" 2 3





# 1 "h:/mingw/include/sys/types.h" 1 3
# 44 "h:/mingw/include/time.h" 2 3
# 69 "h:/mingw/include/time.h" 3
typedef long clock_t;
# 78 "h:/mingw/include/time.h" 3
struct tm
{
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;

};





 clock_t __attribute__((__cdecl__)) clock (void);
 time_t __attribute__((__cdecl__)) time (time_t*);
 double __attribute__((__cdecl__)) difftime (time_t, time_t);
 time_t __attribute__((__cdecl__)) rpl_mktime (struct tm*);
# 111 "h:/mingw/include/time.h" 3
 char* __attribute__((__cdecl__)) asctime (const struct tm*);
 char* __attribute__((__cdecl__)) ctime (const time_t*);
 struct tm* __attribute__((__cdecl__)) gmtime (const time_t*);
 struct tm* __attribute__((__cdecl__)) localtime (const time_t*);


 size_t __attribute__((__cdecl__)) strftime (char*, size_t, const char*, const struct tm*);

 size_t __attribute__((__cdecl__)) wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);


extern void __attribute__((__cdecl__)) _tzset (void);


extern void __attribute__((__cdecl__)) tzset (void);


 char* __attribute__((__cdecl__)) _strdate(char*);
 char* __attribute__((__cdecl__)) _strtime(char*);
# 142 "h:/mingw/include/time.h" 3
extern int* __attribute__((__cdecl__)) __p__daylight (void);
extern long* __attribute__((__cdecl__)) __p__timezone (void);
extern char** __attribute__((__cdecl__)) __p__tzname (void);

extern __attribute__((dllimport)) int _daylight;
extern __attribute__((dllimport)) long _timezone;
extern __attribute__((dllimport)) char *_tzname[2];
# 180 "h:/mingw/include/time.h" 3
extern __attribute__((dllimport)) int daylight;
extern __attribute__((dllimport)) long timezone;
extern __attribute__((dllimport)) char *tzname[2];





 wchar_t* __attribute__((__cdecl__)) _wasctime(const struct tm*);
 wchar_t* __attribute__((__cdecl__)) _wctime(const time_t*);
 wchar_t* __attribute__((__cdecl__)) _wstrdate(wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wstrtime(wchar_t*);
# 220 "h:/mingw/include/time.h" 3
# 1 "h:/mingw/mingw32/include/winx/timex.h" 1 3
# 38 "h:/mingw/mingw32/include/winx/timex.h" 3
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };





struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 80 "h:/mingw/mingw32/include/winx/timex.h" 3
extern struct tm *__localtime_r (__const time_t *__restrict __timer,
                      struct tm *__restrict __tp) ;
# 221 "h:/mingw/include/time.h" 2 3
# 26 "list.c" 2


# 1 "../lib/fnmatch.h" 1
# 62 "../lib/fnmatch.h"
extern int fnmatch (const char *__pattern, const char *__string, int __flags);
# 29 "list.c" 2


# 1 "common.h" 1
# 19 "common.h"
# 1 "tar.h" 1
# 37 "tar.h"
struct posix_header
{
  char name[100];
  char mode[8];
  char uid[8];
  char gid[8];
  char size[12];
  char mtime[12];
  char chksum[8];
  char typeflag;
  char linkname[100];
  char magic[6];
  char version[2];
  char uname[32];
  char gname[32];
  char devmajor[8];
  char devminor[8];
  char prefix[155];

};
# 109 "tar.h"
struct sparse
{
  char offset[12];
  char numbytes[12];

};
# 135 "tar.h"
struct extra_header
{
  char atime[12];
  char ctime[12];
  char offset[12];
  char realsize[12];
  char longnames[4];
  char unused_pad1[68];
  struct sparse sp[16];

  char isextended;

};






struct sparse_header
{
  struct sparse sp[21];

  char isextended;

};
# 170 "tar.h"
struct oldgnu_header
{
  char unused_pad1[345];
  char atime[12];
  char ctime[12];
  char offset[12];
  char longnames[4];
  char unused_pad2;
  struct sparse sp[4];

  char isextended;
  char realsize[12];

};
# 223 "tar.h"
enum archive_format
{
  DEFAULT_FORMAT,
  V7_FORMAT,
  OLDGNU_FORMAT,
  POSIX_FORMAT,
  GNU_FORMAT
};

union block
{
  char buffer[512];
  struct posix_header header;
  struct extra_header extra_header;
  struct oldgnu_header oldgnu_header;
  struct sparse_header sparse_header;
};
# 20 "common.h" 2
# 50 "common.h"
extern int exit_status;
# 76 "common.h"
# 1 "arith.h" 1
# 46 "arith.h"
typedef unsigned long long tarlong;
# 77 "common.h" 2
# 1 "../lib/backupfile.h" 1
# 23 "../lib/backupfile.h"
enum backup_type
{

  none,


  simple,



  numbered_existing,


  numbered
};







extern char const *simple_backup_suffix;
# 55 "../lib/backupfile.h"
char *find_backup_file_name (char const *, enum backup_type);
enum backup_type get_version (char const *context, char const *arg);
enum backup_type xget_version (char const *context, char const *arg);
void addext (char *, char const *, int);
# 78 "common.h" 2
# 1 "../lib/basename.h" 1
# 9 "../lib/basename.h"
char *base_name (char const *name);
# 79 "common.h" 2
# 1 "../lib/exclude.h" 1
# 29 "../lib/exclude.h"
struct exclude;

struct exclude *new_exclude (void);
void add_exclude (struct exclude *, char const *);
int add_exclude_file (struct exclude *, char const *, char);
int excluded_filename (struct exclude const *, char const *);
# 80 "common.h" 2
# 1 "../lib/modechange.h" 1
# 24 "../lib/modechange.h"
# 1 "../config.h" 1
# 25 "../lib/modechange.h" 2


# 1 "h:/mingw/include/sys/types.h" 1 3
# 28 "../lib/modechange.h" 2
# 38 "../lib/modechange.h"
struct mode_change
{
  char op;
  char flags;
  mode_t affected;
  mode_t value;
  struct mode_change *next;
};
# 66 "../lib/modechange.h"
struct mode_change *mode_compile (const char *, unsigned);
struct mode_change *mode_create_from_ref (const char *);
mode_t mode_adjust (mode_t, const struct mode_change *);
void mode_free (struct mode_change *);
# 81 "common.h" 2
# 1 "../lib/safe-read.h" 1
# 9 "../lib/safe-read.h"
ssize_t full_write (int desc, const char *ptr, size_t len);
ssize_t safe_read (int desc, void *ptr, size_t len);
# 82 "common.h" 2


extern const char *program_name;



enum subcommand
{
  UNKNOWN_SUBCOMMAND,
  APPEND_SUBCOMMAND,
  CAT_SUBCOMMAND,
  CREATE_SUBCOMMAND,
  DELETE_SUBCOMMAND,
  DIFF_SUBCOMMAND,
  EXTRACT_SUBCOMMAND,
  LIST_SUBCOMMAND,
  UPDATE_SUBCOMMAND
};

extern enum subcommand subcommand_option;


extern enum archive_format archive_format;


extern char filename_terminator;





extern int blocking_factor;
extern size_t record_size;


extern int absolute_names_option;





extern int after_date_option;


extern int atime_preserve_option;


extern int backup_option;


extern enum backup_type backup_type;


extern int block_number_option;


extern int checkpoint_option;


extern const char *use_compress_program_option;


extern int dereference_option;


extern struct exclude *excluded;


extern const char *files_from_option;


extern int force_local_option;



extern gid_t group_option;


extern int ignore_failed_read_option;


extern int ignore_zeros_option;


extern int incremental_option;


extern const char *info_script_option;


extern int interactive_option;


extern int keep_old_files_option;


extern const char *listed_incremental_option;


extern struct mode_change *mode_option;


extern int multi_volume_option;
# 193 "common.h"
extern time_t newer_mtime_option;


extern int no_recurse_option;


extern int numeric_owner_option;


extern int one_file_system_option;



extern uid_t owner_option;


extern int recursive_unlink_option;


extern int read_full_records_option;


extern int remove_files_option;


extern const char *rsh_command_option;


extern int same_order_option;


extern int same_owner_option;


extern int same_permissions_option;


extern int show_omitted_dirs_option;


extern int sparse_option;


extern int starting_file_option;


extern tarlong tape_length_option;


extern int to_stdout_option;


extern int totals_option;


extern int touch_option;


extern int unlink_first_option;




extern int verbose_option;


extern int verify_option;


extern const char *volno_file_option;


extern const char *volume_label_option;




extern int archive;


extern int dev_null_output;


extern char *current_file_name;


extern char *current_link_name;



extern const char **archive_name_array;
extern int archive_names;
extern int allocated_archive_names;
extern const char **archive_name_cursor;


struct name
  {
    struct name *next;
    size_t length;
    char found;
    char firstch;
    char regexp;
    char *change_dir;
    const char *dir_contents;
    char fake;
    char name[1];
  };
extern struct name *namelist;
extern struct name *namelast;


struct sp_array
  {
    off_t offset;
    size_t numbytes;
  };
extern struct sp_array *sparsearray;


extern int sp_array_size;






enum access_mode
{
  ACCESS_READ,
  ACCESS_WRITE,
  ACCESS_UPDATE
};
extern enum access_mode access_mode;



extern FILE *stdlis;
extern char *save_name;
extern off_t save_sizeleft;
extern off_t save_totsize;
extern int write_archive_to_stdout;

size_t available_space_after (union block *);
off_t current_block_ordinal (void);
void close_archive (void);
void closeout_volume_number (void);
union block *find_next_block (void);
void flush_read (void);
void flush_write (void);
void flush_archive (void);
void init_total_written (void);
void init_volume_number (void);
void open_archive (enum access_mode);
void print_total_written (void);
void reset_eof (void);
void set_next_block_after (union block *);



void create_archive (void);
void dump_file (char *, dev_t, int);
void finish_header (union block *);
void write_eot (void);
# 368 "common.h"
void gid_to_oct (gid_t, char *, size_t);
void major_to_oct (int, char *, size_t);
void minor_to_oct (int, char *, size_t);
void mode_to_oct (mode_t, char *, size_t);
void off_to_oct (off_t, char *, size_t);
void size_to_oct (size_t, char *, size_t);
void time_to_oct (time_t, char *, size_t);
void uid_to_oct (uid_t, char *, size_t);
void uintmax_to_oct (uintmax_t, char *, size_t);



extern int now_verifying;

void diff_archive (void);
void diff_init (void);
void verify_volume (void);



void extr_init (void);
void extract_archive (void);
void apply_delayed_set_stat (void);



void delete_archive_members (void);



void collect_and_sort_names (void);
char *get_directory_contents (char *, dev_t);
void write_dir_file (void);
void gnu_restore (int);
void write_directory_file (void);



enum read_header
{
  HEADER_STILL_UNREAD,
  HEADER_SUCCESS,
  HEADER_ZERO_BLOCK,
  HEADER_END_OF_FILE,
  HEADER_FAILURE
};

extern union block *current_header;
extern struct stat current_stat;
extern enum archive_format current_format;

void decode_header (union block *, struct stat *, enum archive_format *, int);



char *stringify_uintmax_t_backwards (uintmax_t, char *);
# 435 "common.h"
gid_t gid_from_oct (const char *, size_t);
int major_from_oct (const char *, size_t);
int minor_from_oct (const char *, size_t);
mode_t mode_from_oct (const char *, size_t);
off_t off_from_oct (const char *, size_t);
size_t size_from_oct (const char *, size_t);
time_t time_from_oct (const char *, size_t);
uid_t uid_from_oct (const char *, size_t);
uintmax_t uintmax_from_oct (const char *, size_t);

void list_archive (void);
void print_for_mkdir (char *, int, mode_t);
void print_header (void);
void read_and (void (*do_) ());
enum read_header read_header (void);
void skip_extended_headers (void);
void skip_file (off_t);



void extract_mangle (void);



void assign_string (char **, const char *);
char *quote_copy_string (const char *);
int unquote_string (char *);

char *merge_sort (char *, int, int, int (*) (char *, char *));

int is_dot_or_dotdot (const char *);
int remove_any_file (const char *, int);
int maybe_backup_file (const char *, int);
void undo_last_backup (void);



void gid_to_gname (gid_t, char gname[32]);
int gname_to_gid (char gname[32], gid_t *);
void uid_to_uname (uid_t, char uname[32]);
int uname_to_uid (char uname[32], uid_t *);

void init_names (void);
void name_add (const char *);
void name_init (int, char *const *);
void name_term (void);
char *name_next (int change_);
void name_close (void);
void name_gather (void);
void addname (const char *);
int name_match (const char *);
void names_notfound (void);
void name_expand (void);
struct name *name_scan (const char *);
char *name_from_list (void);
void blank_name_list (void);
char *new_name (const char *, const char *);



int confirm (const char *, const char *);
void request_stdin (const char *);



extern char *output_start;

void update_archive (void);
# 32 "list.c" 2

union block *current_header;
struct stat current_stat;
enum archive_format current_format;

static uintmax_t from_oct (const char *, size_t, const char *, uintmax_t);






void
read_and (void (*do_something) ())
{
  enum read_header status = HEADER_STILL_UNREAD;
  enum read_header prev_status;
  char save_typeflag;

  name_gather ();
  open_archive (ACCESS_READ);

  while (1)
    {
      prev_status = status;
      status = read_header ();
      switch (status)
        {
        case HEADER_STILL_UNREAD:
          abort ();

        case HEADER_SUCCESS:





          current_stat.st_mtime = time_from_oct (current_header->header.mtime, sizeof (current_header->header.mtime));

          if (!name_match (current_file_name)
              || current_stat.st_mtime < newer_mtime_option
              || excluded_filename (excluded, base_name (current_file_name)))
            {
              int isextended = 0;

              if (current_header->header.typeflag == 'V'
                  || current_header->header.typeflag == 'M'
                  || current_header->header.typeflag == 'N')
                {
                  (*do_something) ();
                  continue;
                }
              if (show_omitted_dirs_option
                  && current_header->header.typeflag == '5')
                error (0, 0, gettext ("Omitting %s"), current_file_name);



              if (current_header->oldgnu_header.isextended)
                isextended = 1;
              save_typeflag = current_header->header.typeflag;
              set_next_block_after (current_header);
              if (isextended)
                {
# 110 "list.c"
                  skip_extended_headers ();
                }



              if (save_typeflag != '5')
                skip_file (current_stat.st_size);
              continue;
            }

          (*do_something) ();
          continue;

        case HEADER_ZERO_BLOCK:
          if (block_number_option)
            {
              char buf[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];
              fprintf (stdlis, gettext ("block %s: ** Block of NULs **\n"),
                       stringify_uintmax_t_backwards ((uintmax_t) (current_block_ordinal ()), (buf) + sizeof (buf)));
            }

          set_next_block_after (current_header);
          status = prev_status;
          if (ignore_zeros_option)
            continue;
          break;

        case HEADER_END_OF_FILE:
          if (block_number_option)
            {
              char buf[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];
              fprintf (stdlis, gettext ("block %s: ** End of File **\n"),
                       stringify_uintmax_t_backwards ((uintmax_t) (current_block_ordinal ()), (buf) + sizeof (buf)));
            }
          break;

        case HEADER_FAILURE:


          set_next_block_after (current_header);
          switch (prev_status)
            {
            case HEADER_STILL_UNREAD:
              error (0, 0, gettext ("Hmm, this doesn't look like a tar archive"));


            case HEADER_ZERO_BLOCK:
            case HEADER_SUCCESS:
              error (0, 0, gettext ("Skipping to next file header"));
              break;

            case HEADER_END_OF_FILE:
            case HEADER_FAILURE:

              break;
            }
          continue;
        }
      break;
    }

  apply_delayed_set_stat ();
  close_archive ();
  names_notfound ();
}





void
list_archive (void)
{
  int isextended = 0;



  if (verbose_option)
    {
      if (verbose_option > 1)
        decode_header (current_header, &current_stat, &current_format, 0);
      print_header ();
    }

  if (incremental_option && current_header->header.typeflag == 'D')
    {
      off_t size;
      size_t written, check;
      union block *data_block;

      set_next_block_after (current_header);
      if (multi_volume_option)
        {
          assign_string (&save_name, current_file_name);
          save_totsize = current_stat.st_size;
        }
      for (size = current_stat.st_size; size > 0; size -= written)
        {
          if (multi_volume_option)
            save_sizeleft = size;
          data_block = find_next_block ();
          if (!data_block)
            {
              (error (0, 0, gettext ("EOF in archive file")), exit_status = 2);
              break;
            }
          written = available_space_after (data_block);
          if (written > size)
            written = size;
          (*_errno()) = 0;
          check = fwrite (data_block->buffer, sizeof (char), written, stdlis);
          set_next_block_after ((union block *)
                                (data_block->buffer + written - 1));
          if (check != written)
            {
              (error (0, (*_errno()), gettext ("Only wrote %lu of %lu bytes to file %s"), (unsigned long) check, (unsigned long) written, current_file_name), exit_status = 2);


              skip_file (size - written);
              break;
            }
        }
      if (multi_volume_option)
        assign_string (&save_name, ((void *)0));
      fputc ('\n', stdlis);
      fflush (stdlis);
      return;

    }



  if (current_header->oldgnu_header.isextended)
    isextended = 1;



  set_next_block_after (current_header);




  if (isextended)
    {
# 269 "list.c"
      skip_extended_headers ();
    }

  if (multi_volume_option)
    assign_string (&save_name, current_file_name);



  skip_file (current_stat.st_size);

  if (multi_volume_option)
    assign_string (&save_name, ((void *)0));
}
# 307 "list.c"
enum read_header
read_header (void)
{
  size_t i;
  long unsigned_sum;
  long signed_sum;
  long recorded_sum;
  uintmax_t parsed_sum;
  char *p;
  union block *header;
  char **longp;
  char *bp;
  union block *data_block;
  size_t size, written;
  static char *next_long_name, *next_long_link;

  while (1)
    {
      header = find_next_block ();
      current_header = header;
      if (!header)
        return HEADER_END_OF_FILE;

      parsed_sum = from_oct (header->header.chksum,
                             sizeof header->header.chksum,
                             (char *) 0, (~ (long) 0 - ((! ((long) 0 < (long) -1)) ? ~ (long) 0 << (sizeof (long) * 8 - 1) : (long) 0)));
      if (parsed_sum == (uintmax_t) -1)
        return HEADER_FAILURE;

      recorded_sum = parsed_sum;
      unsigned_sum = 0;
      signed_sum = 0;
      p = header->buffer;
      for (i = sizeof (*header); i-- != 0;)
        {



          unsigned_sum += 0xFF & *p;
          signed_sum += *p++;
        }



      for (i = sizeof (header->header.chksum); i-- != 0;)
        {
          unsigned_sum -= 0xFF & header->header.chksum[i];
          signed_sum -= header->header.chksum[i];
        }
      unsigned_sum += ' ' * sizeof header->header.chksum;
      signed_sum += ' ' * sizeof header->header.chksum;

      if (unsigned_sum == sizeof header->header.chksum * ' ')
        {



          return HEADER_ZERO_BLOCK;
        }

      if (unsigned_sum != recorded_sum && signed_sum != recorded_sum)
        return HEADER_FAILURE;



      if (header->header.typeflag == '1')
        current_stat.st_size = 0;
      else
        current_stat.st_size = off_from_oct (header->header.size, sizeof (header->header.size));

      header->header.name[100 - 1] = '\0';
      if (header->header.typeflag == 'L'
          || header->header.typeflag == 'K')
        {
          longp = ((header->header.typeflag == 'L')
                   ? &next_long_name
                   : &next_long_link);

          set_next_block_after (header);
          if (*longp)
            free (*longp);
          size = current_stat.st_size;
          if (size != current_stat.st_size)
            (error (0, 0, gettext ("Memory exhausted")), error (2, 0, gettext ("Error is not recoverable: exiting now")), 0);
          bp = *longp = (char *) xmalloc (size);

          for (; size > 0; size -= written)
            {
              data_block = find_next_block ();
              if (data_block == ((void *)0))
                {
                  (error (0, 0, gettext ("Unexpected EOF on archive file")), exit_status = 2);
                  break;
                }
              written = available_space_after (data_block);
              if (written > size)
                written = size;

              memcpy (bp, data_block->buffer, written);
              bp += written;
              set_next_block_after ((union block *)
                                    (data_block->buffer + written - 1));
            }



        }
      else
        {
          char *name = next_long_name;
          struct posix_header *h = &current_header->header;
          char namebuf[sizeof h->prefix + 1 + sizeof h->name + 1];

          if (! name)
            {


              char *np = namebuf;
              if (h->prefix[0])
                {
                  memcpy (np, h->prefix, sizeof h->prefix);
                  np[sizeof h->prefix] = '\0';
                  np += strlen (np);
                  *np++ = '/';
                }
              memcpy (np, h->name, sizeof h->name);
              np[sizeof h->name] = '\0';
              name = namebuf;
            }

          assign_string (&current_file_name, name);
          assign_string (&current_link_name,
                         (next_long_link ? next_long_link
                          : current_header->header.linkname));
          next_long_link = next_long_name = 0;
          return HEADER_SUCCESS;
        }
    }
}
# 463 "list.c"
void
decode_header (union block *header, struct stat *stat_info,
               enum archive_format *format_pointer, int do_user_group)
{
  enum archive_format format;

  if (strcmp (header->header.magic, "ustar") == 0)
    format = POSIX_FORMAT;
  else if (strcmp (header->header.magic, "ustar  ") == 0)
    format = OLDGNU_FORMAT;
  else
    format = V7_FORMAT;
  *format_pointer = format;

  stat_info->st_mode = mode_from_oct (header->header.mode, sizeof (header->header.mode));
  stat_info->st_mtime = time_from_oct (header->header.mtime, sizeof (header->header.mtime));

  if (format == OLDGNU_FORMAT && incremental_option)
    {
      stat_info->st_atime = time_from_oct (header->oldgnu_header.atime, sizeof (header->oldgnu_header.atime));
      stat_info->st_ctime = time_from_oct (header->oldgnu_header.ctime, sizeof (header->oldgnu_header.ctime));
    }

  if (format == V7_FORMAT)
    {
      stat_info->st_uid = uid_from_oct (header->header.uid, sizeof (header->header.uid));
      stat_info->st_gid = gid_from_oct (header->header.gid, sizeof (header->header.gid));
      stat_info->st_rdev = 0;
    }
  else
    {
      if (do_user_group)
        {
  fprintf((&_iob[2]), "decode_header\n");


  fprintf((&_iob[2]), "decode_header: header->header.uid: %p\n", header->header.uid);
  fprintf((&_iob[2]), "decode_header: sizeof(header->header.uid): %p\n", sizeof(header->header.uid));
          if (numeric_owner_option
              || !*header->header.uname
              || !uname_to_uid (header->header.uname, &stat_info->st_uid))
            stat_info->st_uid = uid_from_oct (header->header.uid, sizeof (header->header.uid));

          if (numeric_owner_option
              || !*header->header.gname
              || !gname_to_gid (header->header.gname, &stat_info->st_gid))
            stat_info->st_gid = gid_from_oct (header->header.gid, sizeof (header->header.gid));
        }
      switch (header->header.typeflag)
        {

        case '4':
          stat_info->st_rdev
            = (((major_from_oct (header->header.devmajor, sizeof (header->header.devmajor))) << 8) | (minor_from_oct (header->header.devminor, sizeof (header->header.devminor))));

          break;



        case '3':
          stat_info->st_rdev
            = (((major_from_oct (header->header.devmajor, sizeof (header->header.devmajor))) << 8) | (minor_from_oct (header->header.devminor, sizeof (header->header.devminor))));

          break;


        default:
          stat_info->st_rdev = 0;
        }
    }
}






static uintmax_t
from_oct (const char *where0, size_t digs0, const char *type, uintmax_t maxval)
{
  uintmax_t value;
  const char *where = where0;
  size_t digs = digs0;

  fprintf((&_iob[2]), "from_oct1\n");
  for (;;)
    {
      if (digs == 0)
        {
          if (type)
            (error (0, 0, gettext ("Blanks in header where octal %s value expected"), type), exit_status = 2);

          return -1;
        }
      if (!(1 && isspace ((unsigned char) *where)))
        break;
      where++;
      digs--;
    }

  value = 0;
  while (digs != 0 && ((unsigned) (*where) - '0' <= 7))
    {


      if (value << 3 >> 3 != value)
        goto out_of_range;
      value = (value << 3) | (*where++ - '0');
      --digs;
    }

  if (digs != 0 && *where && !(1 && isspace ((unsigned char) *where)))
    {
      if (type)
        {
          char buf[1000];
          static struct quoting_options *o;

          if (!o)
            {
              o = clone_quoting_options ((struct quoting_options *) 0);
              set_quoting_style (o, escape_quoting_style);
            }

          quotearg_buffer (buf, sizeof buf, where0, digs0, o);
          (error (0, 0, gettext ("Header contains \"%.*s\" where octal %s value expected"), (int) sizeof buf, buf, type), exit_status = 2);


        }

      return -1;
    }

  if (value <= maxval)
    return value;

 out_of_range:
  if (type)
    (error (0, 0, gettext ("Octal value `%.*s' is out of range for %s"), (int) digs0, where0, type), exit_status = 2);

  return -1;
}
gid_t
gid_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "gid_t", (uintmax_t) (~ (gid_t) 0 - ((! ((gid_t) 0 < (gid_t) -1)) ? ~ (gid_t) 0 << (sizeof (gid_t) * 8 - 1) : (gid_t) 0)));
}
int
major_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "major_t", (uintmax_t) (~ (int) 0 - ((! ((int) 0 < (int) -1)) ? ~ (int) 0 << (sizeof (int) * 8 - 1) : (int) 0)));
}
int
minor_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "minor_t", (uintmax_t) (~ (int) 0 - ((! ((int) 0 < (int) -1)) ? ~ (int) 0 << (sizeof (int) * 8 - 1) : (int) 0)));
}
mode_t
mode_from_oct (const char *p, size_t s)
{

  unsigned u = from_oct (p, s, "mode_t", (~ (uintmax_t) 0 - ((! ((uintmax_t) 0 < (uintmax_t) -1)) ? ~ (uintmax_t) 0 << (sizeof (uintmax_t) * 8 - 1) : (uintmax_t) 0)));
  return ((u & 04000 ? 0004000 : 0)
          | (u & 02000 ? 0002000 : 0)
          | (u & 01000 ? 0001000 : 0)
          | (u & 00400 ? 0x0100 : 0)
          | (u & 00200 ? 0x0080 : 0)
          | (u & 00100 ? 0x0040 : 0)
          | (u & 00040 ? (0x0100 >> 3) : 0)
          | (u & 00020 ? (0x0080 >> 3) : 0)
          | (u & 00010 ? (0x0040 >> 3) : 0)
          | (u & 00004 ? ((0x0100 >> 3) >> 3) : 0)
          | (u & 00002 ? ((0x0080 >> 3) >> 3) : 0)
          | (u & 00001 ? ((0x0040 >> 3) >> 3) : 0));
}
off_t
off_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "off_t", (uintmax_t) (~ (off_t) 0 - ((! ((off_t) 0 < (off_t) -1)) ? ~ (off_t) 0 << (sizeof (off_t) * 8 - 1) : (off_t) 0)));
}
size_t
size_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "size_t", (uintmax_t) (~ (size_t) 0 - ((! ((size_t) 0 < (size_t) -1)) ? ~ (size_t) 0 << (sizeof (size_t) * 8 - 1) : (size_t) 0)));
}
time_t
time_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "time_t", (uintmax_t) (~ (time_t) 0 - ((! ((time_t) 0 < (time_t) -1)) ? ~ (time_t) 0 << (sizeof (time_t) * 8 - 1) : (time_t) 0)));
}
uid_t
uid_from_oct (const char *p, size_t s)
{
  fprintf((&_iob[2]), "uid_from_oct\n");
  fprintf((&_iob[2]), "decode_header: p: %p\n", p);
  return from_oct (p, s, "uid_t", (uintmax_t) (~ (uid_t) 0 - ((! ((uid_t) 0 < (uid_t) -1)) ? ~ (uid_t) 0 << (sizeof (uid_t) * 8 - 1) : (uid_t) 0)));
}
uintmax_t
uintmax_from_oct (const char *p, size_t s)
{
  return from_oct (p, s, "uintmax_t", (~ (uintmax_t) 0 - ((! ((uintmax_t) 0 < (uintmax_t) -1)) ? ~ (uintmax_t) 0 << (sizeof (uintmax_t) * 8 - 1) : (uintmax_t) 0)));
}







char *
stringify_uintmax_t_backwards (uintmax_t o, char *buf)
{
  *--buf = '\0';
  do
    *--buf = '0' + (int) (o % 10);
  while ((o /= 10) != 0);
  return buf;
}
# 690 "list.c"
static char *
isotime (const time_t *time)
{
  static char buffer[21];
  struct tm *tm;

  tm = localtime (time);
  sprintf (buffer, "%4d-%02d-%02d %02d:%02d:%02d\n",
           tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,
           tm->tm_hour, tm->tm_min, tm->tm_sec);
  return buffer;
}
# 710 "list.c"
static void
decode_mode (mode_t mode, char *string)
{
  *string++ = mode & 0x0100 ? 'r' : '-';
  *string++ = mode & 0x0080 ? 'w' : '-';
  *string++ = (mode & 0004000
               ? (mode & 0x0040 ? 's' : 'S')
               : (mode & 0x0040 ? 'x' : '-'));
  *string++ = mode & (0x0100 >> 3) ? 'r' : '-';
  *string++ = mode & (0x0080 >> 3) ? 'w' : '-';
  *string++ = (mode & 0002000
               ? (mode & (0x0040 >> 3) ? 's' : 'S')
               : (mode & (0x0040 >> 3) ? 'x' : '-'));
  *string++ = mode & ((0x0100 >> 3) >> 3) ? 'r' : '-';
  *string++ = mode & ((0x0080 >> 3) >> 3) ? 'w' : '-';
  *string++ = (mode & 0001000
               ? (mode & ((0x0040 >> 3) >> 3) ? 't' : 'T')
               : (mode & ((0x0040 >> 3) >> 3) ? 'x' : '-'));
  *string = '\0';
}
# 748 "list.c"
static int ugswidth = 18;
# 757 "list.c"
void
print_header (void)
{
  char modes[11];
  char *timestamp;

  char uform[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)], gform[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];
  char *user, *group;
  char size[2 * (((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];

  char uintbuf[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];
  time_t longie;
  int pad;
  char *name;

  if (block_number_option)
    {
      char buf[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];
      fprintf (stdlis, gettext ("block %s: "),
               stringify_uintmax_t_backwards ((uintmax_t) (current_block_ordinal ()), (buf) + sizeof (buf)));
    }

  if (verbose_option <= 1)
    {


      char *quoted_name = quote_copy_string (current_file_name);

      if (quoted_name)
        {
          fprintf (stdlis, "%s\n", quoted_name);
          free (quoted_name);
        }
      else
        fprintf (stdlis, "%s\n", current_file_name);
    }
  else
    {


      modes[0] = '?';
      switch (current_header->header.typeflag)
        {
        case 'V':
          modes[0] = 'V';
          break;

        case 'M':
          modes[0] = 'M';
          break;

        case 'N':
          modes[0] = 'N';
          break;

        case 'L':
        case 'K':
          (error (0, 0, gettext ("Visible longname error")), exit_status = 2);
          break;

        case 'S':
        case '0':
        case '\0':
        case '1':
          modes[0] = '-';
          if (current_file_name[strlen (current_file_name) - 1] == '/')
            modes[0] = 'd';
          break;
        case 'D':
          modes[0] = 'd';
          break;
        case '5':
          modes[0] = 'd';
          break;
        case '2':
          modes[0] = 'l';
          break;
        case '4':
          modes[0] = 'b';
          break;
        case '3':
          modes[0] = 'c';
          break;
        case '6':
          modes[0] = 'p';
          break;
        case '7':
          modes[0] = 'C';
          break;
        }

      decode_mode (current_stat.st_mode, modes + 1);



      longie = current_stat.st_mtime;





      timestamp = isotime (&longie);
      timestamp[16] = '\0';




      if (*current_header->header.uname && current_format != V7_FORMAT)
        user = current_header->header.uname;
      else
        user = stringify_uintmax_t_backwards ((uintmax_t) (uintmax_from_oct (current_header->header.uid, sizeof (current_header->header.uid))), (uform) + sizeof (uform));


      if (*current_header->header.gname && current_format != V7_FORMAT)
        group = current_header->header.gname;
      else
        group = stringify_uintmax_t_backwards ((uintmax_t) (uintmax_from_oct (current_header->header.gid, sizeof (current_header->header.gid))), (gform) + sizeof (gform));





      switch (current_header->header.typeflag)
        {

        case '3':
        case '4':
          sprintf (size, "%lu,%lu",
                   (unsigned long) ((int)(((unsigned int) (current_stat.st_rdev) >> 8) & 0xff)),
                   (unsigned long) ((int)((current_stat.st_rdev) & 0xff)));
          break;

        case 'S':
          strcpy (size,
                  stringify_uintmax_t_backwards ((uintmax_t) (uintmax_from_oct (current_header->oldgnu_header.realsize, sizeof (current_header->oldgnu_header.realsize))), (uintbuf) + sizeof (uintbuf)));


          break;
        default:
          strcpy (size, stringify_uintmax_t_backwards ((uintmax_t) (current_stat.st_size), (uintbuf) + sizeof (uintbuf)));
          break;
        }



      pad = strlen (user) + strlen (group) + strlen (size) + 1;
      if (pad > ugswidth)
        ugswidth = pad;






      fprintf (stdlis, "%s %s/%s %*s%s %s",
               modes, user, group, ugswidth - pad, "", size, timestamp);


      name = quote_copy_string (current_file_name);
      if (name)
        {
          fprintf (stdlis, " %s", name);
          free (name);
        }
      else
        fprintf (stdlis, " %s", current_file_name);

      switch (current_header->header.typeflag)
        {
        case '2':
          name = quote_copy_string (current_link_name);
          if (name)
            {
              fprintf (stdlis, " -> %s\n", name);
              free (name);
            }
          else
            fprintf (stdlis, " -> %s\n", current_link_name);
          break;

        case '1':
          name = quote_copy_string (current_link_name);
          if (name)
            {
              fprintf (stdlis, gettext (" link to %s\n"), name);
              free (name);
            }
          else
            fprintf (stdlis, gettext (" link to %s\n"), current_link_name);
          break;

        default:
          fprintf (stdlis, gettext (" unknown file type `%c'\n"),
                   current_header->header.typeflag);
          break;

        case '\0':
        case '0':
        case 'S':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case 'D':
          putc ('\n', stdlis);
          break;

        case 'V':
          fprintf (stdlis, gettext ("--Volume Header--\n"));
          break;

        case 'M':
          strcpy (size,
                  stringify_uintmax_t_backwards ((uintmax_t) (uintmax_from_oct (current_header->oldgnu_header.offset, sizeof (current_header->oldgnu_header.offset))), (uintbuf) + sizeof (uintbuf)));


          fprintf (stdlis, gettext ("--Continued at byte %s--\n"), size);
          break;

        case 'N':
          fprintf (stdlis, gettext ("--Mangled file names--\n"));
          break;
        }
    }
  fflush (stdlis);
}





void
print_for_mkdir (char *pathname, int length, mode_t mode)
{
  char modes[11];
  char *name;

  if (verbose_option > 1)
    {


      modes[0] = 'd';
      decode_mode (mode, modes + 1);

      if (block_number_option)
        {
          char buf[(((sizeof (uintmax_t) * 8 - (! ((uintmax_t) 0 < (uintmax_t) -1))) * 302 / 1000 + 1 + (! ((uintmax_t) 0 < (uintmax_t) -1))) + 1)];
          fprintf (stdlis, gettext ("block %s: "),
                   stringify_uintmax_t_backwards ((uintmax_t) (current_block_ordinal ()), (buf) + sizeof (buf)));
        }
      name = quote_copy_string (pathname);
      if (name)
        {
          fprintf (stdlis, "%s %*s %.*s\n", modes, ugswidth + 18,
                   gettext ("Creating directory:"), length, name);
          free (name);
        }
      else
        fprintf (stdlis, "%s %*s %.*s\n", modes, ugswidth + 18,
                 gettext ("Creating directory:"), length, pathname);
    }
}





void
skip_file (off_t size)
{
  union block *x;

  if (multi_volume_option)
    {
      save_totsize = size;
      save_sizeleft = size;
    }

  while (size > 0)
    {
      x = find_next_block ();
      if (x == ((void *)0))
        (error (0, 0, gettext ("Unexpected EOF on archive file")), error (2, 0, gettext ("Error is not recoverable: exiting now")), 0);

      set_next_block_after (x);
      size -= 512;
      if (multi_volume_option)
        save_sizeleft -= 512;
    }
}





void
skip_extended_headers (void)
{
  union block *exhdr;

  while (1)
    {
      exhdr = find_next_block ();
      if (!exhdr->sparse_header.isextended)
        {
          set_next_block_after (exhdr);
          break;
        }
      set_next_block_after (exhdr);
    }
}
